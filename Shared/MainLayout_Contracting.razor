@inherits LayoutComponentBase
@inject NavigationManager UriHelper
@using AjaTech_Blazor.Data;
@using AjaTech_Blazor.Data.ViewModels
@using Microsoft.JSInterop;

@code{
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            UriHelper.NavigateTo("login");
        }
    }
}

<div class="sb-content-overlay @(hide)">
    <div class="sb-loading">
        <svg class="circular" height="40" width="40">
            <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="6" stroke-miterlimit="10" />
        </svg>
    </div>
</div>
<div class="planner-wrapper" style="width: 100%; visibility:@(visible); opacity:@(opacity)">
    <SfSidebar Position="@SideBar_Direction" ID="plannerSiderBar" @ref="SidebarObj" EnableGestures="false"
               MediaQuery="(min-width: 600px)" Type="SidebarType.Auto" Created="OnCreate"
               CloseOnDocumentClick="onDocumentClick">
        <ChildContent>
            <div class="dock">
                <div class="info align-center">
                    <div class="image"><img @onclick="@(() => GoToPage("/"))" src="css/Images/logo.jpg" alt="Logo" title="Modules" /></div>
                    <div class="content nameContent">
                        <p class='name'>@languageContainer.Keys["login_ajatech"]</p>
                        <p class='user-type'>@languageContainer.Keys["TheContracting"]</p>
                    </div>
                </div>
                <SfListView CssClass="menulist" TValue="NavigationMenu_Contracting" EnableRtl="@IconDirection" ShowIcon="true" DataSource="@datasource" Enable="true">
                    <ListViewTemplates TValue="NavigationMenu_Contracting">
                        <Template>
                            @if ((context as NavigationMenu_Contracting) != null)
                            {
                                var currentPath = UriHelper.Uri;
                                var baseUri = UriHelper.BaseUri;
                                var checkPath = currentPath.Contains("dashboard") || currentPath.Contains("schedule") || currentPath.Contains("doctors") || currentPath.Contains("patients") || currentPath.Contains("preference") || currentPath.Contains("about");
                                activeClass = (!checkPath && (context as NavigationMenu_Contracting).Value == "dashboard") ? "nav-link sidebar-item active" : "nav-link sidebar-item";
                                <NavLink class="@(activeClass)" href="@((context as NavigationMenu_Contracting).Value)" Match="NavLinkMatch.Prefix">
                                    <span class="w-auto p-1 dashboard-image">
                                        <span class="item-image @((context as NavigationMenu_Contracting).Icon)"></span>
                                    </span>
                                    <span class="text font-weight-bolder" style="margin:0;line-height:normal" title="@((context as NavigationMenu_Contracting).Text)">@((context as NavigationMenu_Contracting).Text)</span>
                                </NavLink>
                            }
                        </Template>
                    </ListViewTemplates>
                    <ListViewFieldSettings Text="Text" Id="Value" IconCss="Icon" Tooltip="Text"></ListViewFieldSettings>
                    <ListViewEvents TValue="NavigationMenu_Contracting" Selected="@onSelectedItem"></ListViewEvents>
                </SfListView>
            </div>
        </ChildContent>
    </SfSidebar>

    <main style="@padding">
        @Body
    </main>
</div>
@code{
    SfSidebar SidebarObj;

    private string SideBarToggleClass { get; set; }
    private bool onDocumentClick { get; set; }
    private bool isDevice { get; set; }

    private string target { get; set; } = "#loader-content";

    private string visible { get; set; } = "hidden";
    private string OverlayClass { get; set; }

    private string hide { get; set; }
    private string opacity { get; set; } = "0";
    public NavigationMenu_Contracting ListModel = new NavigationMenu_Contracting();

    public List<NavigationMenu_Contracting> navigationItems_ar = NavigationMenu_Contracting.GetNavigationItems_Setting_Ar();
    public List<NavigationMenu_Contracting> navigationItems_en = NavigationMenu_Contracting.GetNavigationItems_Setting_En();
    bool EnableRtl = true;
    string language1 = "";
    string padding = "";
    bool IconDirection = false;

    List<NavigationMenu_Contracting> datasource = new List<NavigationMenu_Contracting>();
    SidebarPosition SideBar_Direction = new SidebarPosition();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("ar-EG"));
        datasource = NavigationMenu_Contracting.GetNavigationItems_Setting_Ar();
        SideBar_Direction = SidebarPosition.Right;
        IconDirection = true;
        padding = "padding-left:unset";

        language1 = await sessionStorage.GetItemAsync<string>("language");
        if (language1 == "ar-EG")
        {
            languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("ar-EG"));
            datasource = NavigationMenu_Contracting.GetNavigationItems_Setting_Ar();
            SideBar_Direction = SidebarPosition.Right;
            IconDirection = true;
            padding = "padding-left:unset";
        }
        else if (language1 == "en-US")
        {
            languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
            datasource = NavigationMenu_Contracting.GetNavigationItems_Setting_En();
            SideBar_Direction = SidebarPosition.Left;
            IconDirection = false;
            padding = "padding-left:243px ; ";
        }
    }

    private string activeClass { get; set; } = null;

    public void OnCreate()
    {
        this.hide = "sb-hide";
        this.visible = "visible";
        this.opacity = "1";
    }

    private void showSideBar()
    {
        this.SidebarObj.Show();
    }
    private void onSelect()
    {

    }
    private void onSelectedItem(Syncfusion.Blazor.Lists.SelectEventArgs<NavigationMenu_Contracting> args)
    {
        if (this.isDevice)
        {
            this.SidebarObj.Hide();
        }
    }
    private void GoToPage(String Page)//الإنتقال إلى الصفحة المطلوبة
    {
        UriHelper.NavigateTo(Page);
    }
}
