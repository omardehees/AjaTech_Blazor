@page "/Approval_PayReceive_Cash"
@layout MainLayout_Accounts

@using AjaTech_Blazor.Data.ViewModels;
@using Microsoft.Extensions.Configuration;

@inject HttpClient httpClient
@inject NavigationManager UriHelper
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@*-------------------------------------------------------------------------------------------------------------------------*@

<div class="container card-container">
    <div class="row">
        @*=========================================   Page Content Interface ===============================================*@

        @*------------------------------------------  شبكة دفع/قبض نقدي    -----------------------------------------------*@
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#1b809e;margin-top:20px;font-size:x-large;border-radius:5px;color:white">@languageContainer.Keys["Monetary_Entry"]</div>
                    <SfGrid @ref="grdEntry" AllowFiltering="true" ShowColumnChooser="true" AllowSelection="true" EnableRtl="true" DataSource="DataSource_grdEntry" AllowResizing="true" Width="100%" AllowPaging="true" Toolbar="@(new string[] { "Search","Delete","Print","ColumnChooser"})">
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridEvents RowSelected="RowSelect" QueryCellInfo="CellColor_Orders" OnActionBegin="ActionBegin_" TValue="VM_Inv_GL"></GridEvents>
                        <GridEditSettings ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog"></GridEditSettings>
                        <GridColumns>
                            <GridColumn Field="@nameof(VM_Inv_GL.ID)" Visible="false" IsPrimaryKey="true" IsIdentity="true" DefaultValue="1" HeaderText="@languageContainer.Keys["ID"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.HardCopyCode)" AllowEditing="false" HeaderText="@languageContainer.Keys["Entry_Code"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.The_Date)" EditType="EditType.DatePickerEdit" Format="dd/MM/yyyy" Type="ColumnType.DateTime" HeaderText="@languageContainer.Keys["Date"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Type)" AllowEditing="false" HeaderText="@languageContainer.Keys["Entry_Type"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Value)" HeaderText="@languageContainer.Keys["Value"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Contract_Type)" HeaderText="@languageContainer.Keys["Contract_Type"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Contract_Code)" HeaderText="@languageContainer.Keys["Contract_Code"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.CreditAccount)" HeaderText="@languageContainer.Keys["Credit"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.DebitAccount)" HeaderText="@languageContainer.Keys["Debit"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Custom_Statement)" HeaderText="@languageContainer.Keys["Statement"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Apporoved_By)" AllowEditing="false" HeaderText="@languageContainer.Keys["Approval"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.Approved_At)" AllowEditing="false" EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" HeaderText="@languageContainer.Keys["Approval_Date"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.The_User)" Visible="false"></GridColumn>
                            <GridColumn Field="@nameof(VM_Inv_GL.ProccessID)" Visible="false"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
        @*------------------------------------------  شبكة دفع/قبض نقدي    -----------------------------------------------*@


        @*------------------------------------------  عمليات علي قيد دفع/قبض نقدي    ------------------------------------*@
        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row" style="direction:@languageContainer.Keys["Text_Direction"]">
                    @*----------------------------------------------------------------------------------------------------------------*@
                    <div class="col-lg-12 text-center font-weight-bold" style="border:#e8e11f 1px solid;background-color:#868218;color:white;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Operations_PayReceive_Entry_Cash"]</div>
                    @*----------------------------------------------------------------------------------------------------------------*@

                    <div class="col-lg-2 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfTextBox @bind-Value="txtNxtHardCopyCode_EntryCode" Placeholder='@languageContainer.Keys["Entry_Code"]' Enabled="false" FloatLabelType="@FloatLabelType.Always" CssClass='form-control'></SfTextBox>
                    </div>

                    <div class="col-lg-2 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfDatePicker @bind-Value="The_date" TValue="DateTime" Format="dd/MM/yyyy" Placeholder='@languageContainer.Keys["Date"]' FloatLabelType="@FloatLabelType.Always" CssClass='form-control'></SfDatePicker>
                    </div>

                    <div class="radio-control col-lg-2">
                        <span class="row  font-weight-bold form-group">@languageContainer.Keys["Entry_Type"]</span>
                        <div class="row">
                            <SfRadioButton CssClass='pr-1 pl-1 font-weight-bold' Label="@languageContainer.Keys["Pay"]" Name="Type" @bind-Checked="rb_Pay"></SfRadioButton>
                            <SfRadioButton CssClass='pr-1 pl-1 font-weight-bold' Label="@languageContainer.Keys["Receive"]" Name="Type" @bind-Checked="rb_Receive"></SfRadioButton>
                        </div>
                    </div>

                    <div class="col-lg-2 font-weight-bold form-group pr-1 pl-1" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfNumericTextBox @bind-Value="seEntry_Value" TValue="decimal?" Placeholder='@languageContainer.Keys["Value"]' Min="0" Max="1000000" FloatLabelType="@FloatLabelType.Always" CssClass='form-control'></SfNumericTextBox>
                    </div>

                    @*نوع التعاقد *@
                    <div class="col-lg-2 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfDropDownList ShowClearButton="true" @ref="cmbContractType" @bind-Value="cmbContractType_bind" AllowFiltering="true" CssClass="pr-1 pl-1"
                                        DataSource="DataSource_ContractType" TValue="string"
                                        TItem="string" Placeholder='@languageContainer.Keys["Contract_Type"]'
                                        FloatLabelType="@FloatLabelType.Always">
                        </SfDropDownList>
                    </div>
                    @*كود التعاقد *@
                    <div class="col-lg-2 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfDropDownList ShowClearButton="true" @ref="cmbContractCode" @bind-Value="cmbContractCode_bind" AllowFiltering="true" CssClass="pr-1 pl-1"
                                        DataSource="DataSource_ContractCode" TValue="string"
                                        TItem="string" Placeholder='@languageContainer.Keys["Contract_Code"]'
                                        FloatLabelType="@FloatLabelType.Always">
                        </SfDropDownList>
                    </div>

                    <div class="col-lg-3 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfDropDownList ShowClearButton="true" @bind-Value="cmbBox_bind" @ref="cmbBox" AllowFiltering="true" DataSource="DataSource_Box" TValue="string" CssClass="pr-1 pl-1"
                                        TItem="string" Placeholder='@languageContainer.Keys["Box"]' FloatLabelType="@FloatLabelType.Always">
                            <DropDownListFieldSettings Text="Title" Value="Title"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>

                    <div class="col-lg-3 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfDropDownList ShowClearButton="true" @bind-Value="cmbAccount_bind" @ref="cmbAccount" AllowFiltering="true" DataSource="DataSource_Account" TValue="string" CssClass="pr-1 pl-1"
                                        TItem="string" Placeholder='@languageContainer.Keys["account"]' FloatLabelType="@FloatLabelType.Always">
                            <DropDownListFieldSettings Text="HardCopyCode" Value="HardCopyCode"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>

                    <div class="col-lg-3 font-weight-bold form-group" style="text-align:@languageContainer.Keys["Style_Text_Align"]">
                        <SfTextBox @ref="txtStatment" Placeholder='@languageContainer.Keys["Statement"]' FloatLabelType="@FloatLabelType.Always" CssClass='form-control'></SfTextBox>
                    </div>


                    <div class="col-lg-1 font-weight-bold form-group" style="margin-top:auto">
                        <SfButton OnClick="btnEdit" type="button" CssClass="e-btn e-normal e-warning form-control font-weight-bold">@languageContainer.Keys["Edit"]</SfButton>
                    </div>
                    <div class="col-lg-1 font-weight-bold form-group" style="margin-top:auto">
                        <SfButton OnClick="btn_Success_Approval" type="button" CssClass="e-btn e-normal e-success form-control font-weight-bold">@languageContainer.Keys["Approval"]</SfButton>
                    </div>
                    <div class="col-lg-1 font-weight-bold form-group" style="margin-top:auto">
                        <SfButton OnClick="btn_Print" CssClass=" e-btn font-weight-bold e-normal e-primary" IconCss="e-icons e-print-icon">. @languageContainer.Keys["Print"]</SfButton>
                    </div>

                    @*---------------------------------------------------------------------------------------------------------------------------*@

                </div>
            </div>
        </div>
        @*------------------------------------------/ عمليات علي قيد دفع/قبض نقدي    ------------------------------------*@


        @*========================================= / Page Content Interface ================================================*@
    </div>
</div>

@*============================================    Toast   ===================================================================*@
<SfToast ID="Failed_Id_Custom" @ref="Toast_Custom_Failed"
         TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger"
         Title="@languageContainer.Keys["Toast_Title_Failed"]"
         Content="@ToastContent">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
<SfToast ID="Success_Id" @ref="Toast_Success" TimeOut="4000" CssClass="e-toast-success" Icon="e-success toast-icons" Title="@languageContainer.Keys["Toast_Title_Success"]" Content="@languageContainer.Keys["Toast_Content_Success"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@*============================================  / Toast   ===================================================================*@

@*===========================================================================================================================*@
@*====================================================   Code  ==============================================================*@
@*===========================================================================================================================*@

@code {

    // المتغيرات
    #region

    string ToastContent = "", Url_Contract, FullName, AccountBalance = "";
    string txtNxtHardCopyCode_EntryCode, UserName, Row_Approved_By, cmbContractType_bind = "", cmbContractCode_bind = "", cmbBox_bind = "", cmbAccount_bind = "", Gl_User, Gl_ProcessId;
    string[] LightGreen = { "color: #0b7924f0;font-weight:Bold" };
    decimal? seEntry_Value;
    DateTime The_date;
    long RowId_Selected;
    int? RowHardCopyCode_Selected = 0;
    bool rb_Pay, rb_Receive;

    SfGrid<VM_Inv_GL> grdEntry;
    SfToast Toast_Custom_Failed, Toast_Success;
    SfTextBox txtStatment;
    SfDropDownList<string, string> cmbAccount, cmbBox, cmbContractCode, cmbContractType;
    SfButton refbtnSave_Entry;

    List<string> DataSource_Box, DataSource_Account, DataSource_ContractCode = new List<string>();
    List<string> DataSource_ContractType = new List<string>();
    List<VM_Inv_GL> DataSource_grdEntry = new List<VM_Inv_GL>();
    Permissions Permissions_Obj = new Permissions();
    VM_Inv_GL vM_Inv_GL = new VM_Inv_GL();

    #endregion

    //تهيئة الصفحة
    protected override async Task OnInitializedAsync()
    {

        DataSource_Box = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=select Title From Def_Accounts_api where Type='صندوق'&Required_Field=Title");
        DataSource_Account = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=select Title From Def_Accounts_api where Type='مورد' Or Type='عميل'&Required_Field=Title");
        this.DataSource_ContractCode = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select HardCopyCode From Inv_Contracts &Required_Field=HardCopyCode");

        DataSource_grdEntry = await httpClient.GetJsonAsync<List<VM_Inv_GL>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadTable?QueryString=select * From Inv_GL Where  Type = 'دفع' or Type='قبض'");
        //DataSource_grdEntry.RemoveAll(a => a.Deleted_By != null);
        DataSource_grdEntry.RemoveAll(a => a.Deleted_By != "");

        DataSource_ContractType.Add("تركيبات");
        DataSource_ContractType.Add("صيانة");
    }
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Permissions_Obj = await sessionStorage.GetItemAsync<Permissions>("Permissions");
        //UserName = Permissions_Obj.UserName;
        //FullName = Permissions_Obj.Full_Name;

        var user = (await AuthStat).User;
        UserName = user.Identity.Name;
        FullName = user.Identity.Name;

        Url_Contract = Configuration.GetValue<string>("Reports") + "/Print/Reports_Entry_Form.aspx" + "?The_Footer=" + FullName + "&Signature=" + UserName + "&HardCopyCode=" + RowHardCopyCode_Selected + "&AccountBalance=" + AccountBalance;

    }

    //ألوان الشبكة
    public void CellColor_Orders(QueryCellInfoEventArgs<VM_Inv_GL> args)
    {
        if (!string.IsNullOrEmpty(args.Data.Apporoved_By))
        {
            args.Cell.AddStyle(LightGreen);
        }
    }

    // تحديد الصف وجلب البيانات
    public async void RowSelect(RowSelectEventArgs<VM_Inv_GL> args)
    {
        txtNxtHardCopyCode_EntryCode = args.Data.HardCopyCode.ToString();
        seEntry_Value = args.Data.Value;
        txtStatment.Value = args.Data.Custom_Statement;
        cmbContractCode_bind = args.Data.Contract_Code;
        cmbContractType_bind = args.Data.Contract_Type;
        The_date = args.Data.The_Date.Value;
        if (args.Data.Type == "دفع")
        {
            AccountBalance = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/GetAccountBalance?Account_Name=" + args.Data.DebitAccount + " ");
            AccountBalance = AccountBalance.Replace("\"", "");
            //await jsRuntime.InvokeAsync<string>("console.log", "AccountBalance df3 >> " + AccountBalance);

            cmbAccount_bind = args.Data.DebitAccount;
            cmbBox_bind = args.Data.CreditAccount;
            rb_Pay = true;
            rb_Receive = false;

            StateHasChanged();
        }
        if (args.Data.Type == "قبض")
        {
            AccountBalance = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/GetAccountBalance?Account_Name=" + args.Data.CreditAccount + " ");
            AccountBalance = AccountBalance.Replace("\"", "");
            //await jsRuntime.InvokeAsync<string>("console.log", "AccountBalance abd>> " + AccountBalance);


            cmbAccount_bind = args.Data.CreditAccount;
            cmbBox_bind = args.Data.DebitAccount;
            rb_Receive = true;
            rb_Pay = false;
            StateHasChanged();
        }

        RowId_Selected = args.Data.ID;
        RowHardCopyCode_Selected = args.Data.HardCopyCode;
        Row_Approved_By = args.Data.Apporoved_By;

        Gl_User = args.Data.The_User;
        Gl_ProcessId = args.Data.ProccessID;

        StateHasChanged();
    }

    //تعديل قيد
    protected async void btnEdit()
    {
        //---------- validating ---------------------

        if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        if (seEntry_Value == 0)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Value"] + languageContainer.Keys["Empty"];
            await this.Toast_Custom_Failed.Show();
            return;
        }

        if (string.IsNullOrWhiteSpace(cmbBox.Value))
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Box"] + languageContainer.Keys["Empty"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        if (string.IsNullOrWhiteSpace(cmbAccount.Value))
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["account"] + languageContainer.Keys["Empty"];
            await this.Toast_Custom_Failed.Show();
            return;
        }

        try
        {
            vM_Inv_GL.ID = RowId_Selected;
            vM_Inv_GL.The_User = Gl_User;
            vM_Inv_GL.Currency = "ريال سعودي";
            vM_Inv_GL.The_Date = The_date;
            vM_Inv_GL.HardCopyCode = Convert.ToInt32(txtNxtHardCopyCode_EntryCode);
            vM_Inv_GL.Value = seEntry_Value;
            vM_Inv_GL.Contract_Code = cmbContractCode.Value;
            vM_Inv_GL.Contract_Type = cmbContractType.Value;
            vM_Inv_GL.Custom_Statement = txtStatment.Value;
            vM_Inv_GL.Edited_By = UserName;
            vM_Inv_GL.Edited_At = DateTime.Now;
            vM_Inv_GL.ProccessID = Gl_ProcessId;
            vM_Inv_GL.Document_ID = txtNxtHardCopyCode_EntryCode;

            if (rb_Pay)
            {
                vM_Inv_GL.Type = "دفع";
                vM_Inv_GL.DebitAccount = cmbAccount.Value;
                vM_Inv_GL.CreditAccount = cmbBox.Value;
                vM_Inv_GL.Auto_Statement = " عملية دفع نقدي من : " + cmbBox.Value + " إلـي : " + cmbAccount.Value + " بـ قيمة : " + seEntry_Value + " ريال سعودي ";
            }
            if (rb_Receive)
            {
                vM_Inv_GL.Type = "قبض";
                vM_Inv_GL.DebitAccount = cmbBox.Value;
                vM_Inv_GL.CreditAccount = cmbAccount.Value;
                vM_Inv_GL.Auto_Statement = " عملية دفع نقدي من : " + cmbAccount.Value + " إلـي : " + cmbBox.Value + " بـ قيمة  : " + seEntry_Value + " ريال سعودي ";
            }



            await httpClient.PutJsonAsync(Configuration.GetValue<string>
                ("Api") + "/api/Inv_GL_api?id=" + RowId_Selected.ToString(), vM_Inv_GL);
            await this.Toast_Success.Show();

            The_date = DateTime.Now;

            cmbAccount.Clear();
            cmbBox.Clear();

            seEntry_Value = 0;
            txtStatment.Value = "";

            rb_Pay = false;
            rb_Receive = false;

            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("EX >> " + ex.Message);
        }
    }

    //  مسح قيد
    public async void ActionBegin_(ActionEventArgs<VM_Inv_GL>
        args)
    {
        if (args.RequestType.ToString() == "Delete")
        {
            if (string.IsNullOrWhiteSpace(args.Data.Apporoved_By) != true)
            {
                this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
                await this.Toast_Custom_Failed.Show();
                return;
            }
            await httpClient.PutJsonAsync(Configuration.GetValue<string>
                ("Api") + "/api/Services/UpdateField?QueryString=" + "Update Inv_GL set Deleted_By = '" + UserName + "' , Deleted_At = getdate() where ID = '" + args.Data.ID + "'", vM_Inv_GL);
            await this.Toast_Success.Show();
        }
    }

    // زر اعتماد
    protected async void btn_Success_Approval()
    {
        if (RowHardCopyCode_Selected == 0)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Toast_Failed_SelectRow"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        else if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        else
        {
            string QueryString = "Update Inv_GL set Apporoved_By = '" + UserName + "' , Approved_At = getdate() where HardCopyCode = '" + RowHardCopyCode_Selected + "'";
            await httpClient.PutJsonAsync(Configuration.GetValue<string>
                ("Api") + "/api/Services/UpdateField?QueryString=" + QueryString, vM_Inv_GL);
        }

        //-------------------------------------
        The_date = DateTime.Now;

        cmbAccount.Clear();
        cmbBox.Clear();

        seEntry_Value = 0;
        txtStatment.Value = "";
        // ------------------------------------------------------

        await OnInitializedAsync();
        StateHasChanged();
        await this.Toast_Success.Show();
    }

    // زر الطباعة
    public async void btn_Print()
    {
        if (RowId_Selected == 0)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Toast_Failed_SelectRow"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        else
        {

            await jsRuntime.InvokeAsync<object>("open", new TimeSpan(1, 1, 1), Url_Contract, "_blank");

        }
    }


}
