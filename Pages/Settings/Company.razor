@page "/company"
@layout MainLayout_Settings

@using AjaTech_Blazor.Data.Tables_Models;
@using System;
@using System.Globalization;

@using AjaTech_Blazor.Data.IServices;
@using AjaTech_Blazor.Data.ViewModels;
@using Microsoft.Extensions.Configuration;
@using Microsoft.Data.SqlClient;
@using System.Diagnostics;


@*@inject Blazored.SessionStorage.ISessionStorageService sessionStorage*@
@inject ITbl_Log_Activities_yService iTbl_Log_Activities_yService
@inject Icb_database_Service icb_database_Service
@inject NavigationManager UriHelper
@inject IJSRuntime jsRuntime
@inject ITbl_def_Company_yService iTbl_def_Company_yService
@inject ITbl_def_Company_Braches_yService iTbl_def_Company_Braches_yService
@inject ITbl_def_Company_Departments_yService  iTbl_def_Company_Departments_yService
@inject ITbl_def_Licences  iTbl_def_Licences
@inject IConfiguration Configuration
@inject IFileUpload fileupload
@inject HttpClient httpClient
@*----------------------------------------------------------------------------*@
@*--------CARDS CARDS CARDS CARDS CARDS CARDS CARDS CARDS---------------------*@

<div class="container card-container">
    <div class="row">
        @*-------------------------------- --- Card B  Corporation Definition-----------------------------------*@
        <div class="col-lg-6 navStyle">
            <div class="col" @onclick="@onEdit_CardB">
                <div tabindex="0" class="e-card calory-fonts-click">
                    <div class="@languageContainer.Keys["Text_Align"]" dir="@languageContainer.Keys["Text_Direction"]">
                        <div class="row">
                            <div class="col-lg-6">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Title_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Title_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Slogan_A_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Slogan_A_En</span><br />
                            </div>
                            <div class="col-lg-6">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Slogan_B_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Slogan_B_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Activities_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Activities_En</span><br />
                            </div>
                        </div>
                    </div>
                    <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Company_Corporation_Definition"]</h3>
                </div>
            </div>
        </div>
        @*----------------------------------- Card C    Address -----------------------------------*@
        <div class="col-lg-6 navStyle">
            <div class="col" @onclick="@onEdit_CardC">
                <div tabindex="0" class="e-card calory-fonts-click">
                    <div class="@languageContainer.Keys["Text_Align"]" dir="@languageContainer.Keys["Text_Direction"]">
                        <div class="row">
                            <div class="col-lg-6">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Head_Office_Address_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Factory_Address_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Inventory_Address_Ar</span>
                            </div>
                            <div class="col-lg-6">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Head_Office_Address_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Factory_Address_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Inventory_Address_En</span>
                            </div>
                        </div>
                    </div>
                    <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Address"]</h3>
                </div>
            </div>
        </div>
        @*----------------------------------- Card D    Contact Data-----------------------------------*@
        <div class="col-lg-12 navStyle">
            <div class="col" @onclick="@onEdit_CardD">
                <div tabindex="0" class="e-card calory-fonts-click">
                    <div class="@languageContainer.Keys["Text_Align"]" dir="@languageContainer.Keys["Text_Direction"]">
                        <div class="row">
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Mail_Box</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.WebSite_Url</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Facebook</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Tweeter</span><br />
                            </div>
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Email</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Mobile_A</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Mobile_B</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Mobile_C</span><br />
                            </div>
                            <div class="col-lg-3">

                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Mobile_D</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Phone_A</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Phone_B</span><br />

                            </div>
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Phone_C</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Phone_C</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Suggestions_Complains_Phone</span><br />
                            </div>
                        </div>
                    </div>
                    <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Company_Contact"]</h3>

                </div>
            </div>
        </div>

        @*----------------------------------- Card E    Owners-----------------------------------*@
        <div class="col-lg-6 navStyle">
            <div class="col" @onclick="@onEdit_CardE">
                <div tabindex="0" class="e-card calory-fonts-click">
                    <div class="@languageContainer.Keys["Text_Align"]" dir="@languageContainer.Keys["Text_Direction"]">
                        <div class="row">
                            <div class="col-lg-6">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Owner_Main</span><br />
                            </div>
                            <div class="col-lg-6">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Owner_A</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Owner_B</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Owner_C</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Owner_D</span><br />
                            </div>
                        </div>
                    </div>
                    <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Company_Owners"]</h3>
                </div>
            </div>
        </div>
        @*----------------------------------- Card H  Class And Tax.No-----------------------------------*@
        <div class="col-lg-6 navStyle">
            <div class="col" @onclick="@onEdit_CardH">
                <div tabindex="0" class="e-card calory-fonts-click">
                    <div class="@languageContainer.Keys["Text_Align"]" dir="@languageContainer.Keys["Text_Direction"]">
                        <span class="font-weight-bold e-large">@tbl_def_Company_y.Class</span><br />
                        <span class="font-weight-bold e-large">@tbl_def_Company_y.Tax_Registration_Number</span><br />
                        <span class="font-weight-bold e-large">@tbl_def_Company_y.Notes_Ar</span><br />
                        <span class="font-weight-bold e-large">@tbl_def_Company_y.Notes_En</span><br />
                    </div>
                    <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Company_Class_And_Tax"]</h3>

                </div>
            </div>
        </div>
        @*----------------------------------- Card F   Managers-----------------------------------*@
        <div class="col-lg-12 navStyle">
            <div class="col" @onclick="@onEdit_CardF">
                <div tabindex="0" class="e-card calory-fonts-click">
                    <div class="@languageContainer.Keys["Text_Align"]" dir="@languageContainer.Keys["Text_Direction"]">
                        <div class="row">
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Executive_Manager_Name_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Executive_Manager_Name_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Executive_Manager_Phone</span><br />
                                <span><img width="60" height="60" src="css/UploadsFile/@tbl_def_Company_y.Executive_Manager_Signature" /> </span><br />
                            </div>
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Accountancy_Manager_Name_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Accountancy_Manager_Name_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Accountancy_Manager_Phone</span><br />
                                <span><img width="60" height="60" src="css/UploadsFile/@tbl_def_Company_y.Accountancy_Manager_Signature" /></span><br />
                            </div>
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.HR_Manager_Name_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.HR_Manager_Name_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.HR_Manager_Name_Phone</span><br />
                                <span><img width="60" height="60" src="css/UploadsFile/@tbl_def_Company_y.HR_Manager_Name_Signature" /> </span><br />
                            </div>
                            <div class="col-lg-3">
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Sales_Manager_Name_Ar</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Sales_Manager_Name_En</span><br />
                                <span class="font-weight-bold e-large">@tbl_def_Company_y.Sales_Manager_Name_Phone</span><br />
                                <span><img width="60" height="60" src="css/UploadsFile/@tbl_def_Company_y.Sales_Manager_Name_Signature" /> </span><br />
                            </div>
                        </div>
                    </div>
                    <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Company_Managers"]</h3>

                </div>
            </div>
        </div>
        @*----------------------------------- Card I  Logo And Banners-----------------------------------*@
        <div class="col-lg-12 navStyle">
            <div class="col" @onclick="@onEdit_CardI">
                <div tabindex="0" class="e-card water-fonts">
                    <div class="text-center">
                        <div class="row">
                            <div class="col-lg-3">
                                <span><img width="100" height="100" style="margin:5px" src="css/UploadsFile/@tbl_def_Company_y.Logo_Color_Big" /></span><br />
                                <span><img width="50" height="50" src="css/UploadsFile/@tbl_def_Company_y.Logo_Color_Small" /></span><br />
                            </div>
                            <div class="col-lg-3">
                                <span><img width="100" height="100" style="margin:5px" src="css/UploadsFile/@tbl_def_Company_y.Logo_Print_Big" /></span><br />
                                <span><img width="50" height="50" src="css/UploadsFile/@tbl_def_Company_y.Logo_Print_Small" /></span><br />
                            </div>
                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Banner_Big" /></span><br /><br />
                                <span><img width="250" height="70" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Banner_small" /></span><br />
                            </div>
                        </div>

                        @*<div class="row">

                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Technical" /></span><br />
                            </div>

                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Financial" /></span><br />
                            </div>

                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Managing" /></span><br />
                            </div>

                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Inventory" /></span><br />
                            </div>

                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Purchases" /></span><br />
                            </div>

                            <div class="col-lg-6">
                                <span><img width="400" height="100" style="margin:5px;border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Sales" /></span><br />
                            </div>
                        </div>*@


                        <h3 class="font-weight-bold e-color-palette text-right p-2 text-muted">@languageContainer.Keys["Company_Logos_And_Banners"]</h3>
                    </div>
                </div>
            </div>
        </div>


        @*-----------------------------------  Grids Tabs -----------------------------------*@

        <SfTab ShowCloseButton="true">
            <TabItems>

                @*----------------------------------- Branches Grid -----------------------------------*@

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@languageContainer.Keys["Company_Branches_Grid"]"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="tab-content">
                            @*=================================================================================================*@
                            <div class="col-lg-12 control-section">
                                <div class="content-wrapper">
                                    <div class="row">
                                        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#7575ff;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Company_Branches_Grid"]</div>
                                        <SfGrid ID="Grid" @ref="Grid1" DataSource="@DataSource_BranchesGrid" AllowResizing="true" AllowExcelExport="true" Width="100%" AllowPaging="true" AllowRowDragAndDrop="true" Toolbar="@(new string[] { "Add", "Delete", "Edit", "Update", "Cancel" , "Print" , "ExcelExport", "Search" })">
                                            <GridEvents OnToolbarClick="ToolbarClick" OnActionBegin="Actionbegin_Branches" TValue="Tbl_def_Company_Braches_y"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams"></GridEditSettings>
                                            <GridColumns>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.ID) DefaultValue="0" IsIdentity="true" HeaderText="ID" IsPrimaryKey="true" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Branch_Title_Ar) HeaderText="@languageContainer.Keys["Company_Branches_Name_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Branch_Title_En) HeaderText="@languageContainer.Keys["Company_Branches_Name_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Address_Ar) HeaderText="@languageContainer.Keys["Company_Branches_Address_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Address_En) HeaderText="@languageContainer.Keys["Company_Branches_Address_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Branch_Accountancy_Manager_Name_Ar) HeaderText="@languageContainer.Keys["Company_Branches_Manager_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Branch_Accountancy_Manager_Name_En) HeaderText="@languageContainer.Keys["Company_Branches_Manager_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Enabled) DefaultValue="1" EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Enabled"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Archived) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Archived"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Braches_y.Deleted) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Deleted"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>
                            @code{
                                SfGrid<Tbl_def_Company_Braches_y> Grid1;
                                public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
                                { if (args.Item.Id == "Grid_excelexport") { this.Grid1.ExcelExport(); } }

                                private object DialogParams = new
                                {
@@params = new DialogModel { MinHeight = "400px", Width = "450px" }

                                @*@@params = new DialogModel { MinHeight = "400px", Width = "450px", Header = "aaaaaaaaaaaaaaa", CssClass = TextAlign.Center.ToString() }*@
                                };

                                Tbl_def_Company_Braches_y BranchesObject = new Tbl_def_Company_Braches_y();
                                Tbl_def_Company_Braches_y BranchesObject2 = new Tbl_def_Company_Braches_y();

                                public async void Actionbegin_Branches(ActionEventArgs<Tbl_def_Company_Braches_y> args)
                                {
                                    string Used_Branch = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select * from Def_Employees_api&Required_Field=Branch");
                                    string List_Branch_Title_Ar = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Company_Braches_y&Required_Field=Branch_Title_Ar");
                                    string List_Branch_Title_En = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Company_Braches_y&Required_Field=Branch_Title_En");

                                    // Delete Api

                                    if (args.RequestType.ToString() == "Delete")
                                    {
                                        // Prevent Delete If Element was used
                                        if (Used_Branch.IndexOf(args.Data.Branch_Title_Ar) != -1)
                                        {
                                            await this.Toast_Del_Failed.Show();
                                        }
                                        else if (Used_Branch.IndexOf(args.Data.Branch_Title_En) != -1)
                                        {
                                            await this.Toast_Del_Failed.Show();
                                        }
                                        // Prevent Delete If This User Hasn't Permission
                                        else if (Check_User_Super_Admin == "False")
                                        {
                                            await this.Toast_Permission_Failed.Show();
                                        }
                                        // Prevent Delete If ID = 0 (It's Means That Id Didn't take His Place In DataBase)
                                        else if (args.Data.ID == 0)
                                        {
                                            await this.Toast_Reload_Failed.Show();
                                        }
                                        else
                                        {
                                            await iTbl_def_Company_Braches_yService.Tbl_def_Company_Braches_yDelete(args.Data.ID.Value);
                                            await this.Toast_Success.Show();
                                        }
                                    }
                                    else if (args.RequestType.ToString() == "Save")
                                    {
                                        if (args.Action == "add")
                                        // Post Api

                                        {
                                            BranchesObject.Branch_Title_Ar = args.Data.Branch_Title_Ar;
                                            BranchesObject.Branch_Title_En = args.Data.Branch_Title_En;
                                            BranchesObject.Address_Ar = args.Data.Address_Ar;
                                            BranchesObject.Address_En = args.Data.Address_En;
                                            BranchesObject.Branch_Accountancy_Manager_Name_Ar = args.Data.Branch_Accountancy_Manager_Name_Ar;
                                            BranchesObject.Branch_Accountancy_Manager_Name_En = args.Data.Branch_Accountancy_Manager_Name_En;
                                            BranchesObject.Enabled = args.Data.Enabled;
                                            BranchesObject.Archived = args.Data.Archived;
                                            BranchesObject.Deleted = args.Data.Deleted;

                                            // Prevent Adding Because This Element is repeat
                                            if (List_Branch_Title_Ar.IndexOf(args.Data.Branch_Title_Ar) != -1)
                                            {
                                                await this.Toast_Add_Failed.Show();
                                            }
                                            else if (List_Branch_Title_En.IndexOf(args.Data.Branch_Title_En) != -1)
                                            {
                                                await this.Toast_Add_Failed.Show();
                                            }
                                            else
                                            {
                                                await iTbl_def_Company_Braches_yService.Tbl_def_Company_Braches_yInsert(BranchesObject);
                                                await this.Toast_Success.Show();
                                            }

                                        }
                                        else
                                        // Put Api

                                        {
                                            BranchesObject2.ID = args.Data.ID;
                                            BranchesObject2.Branch_Title_Ar = args.Data.Branch_Title_Ar;
                                            BranchesObject2.Branch_Title_En = args.Data.Branch_Title_En;
                                            BranchesObject2.Address_Ar = args.Data.Address_Ar;
                                            BranchesObject2.Address_En = args.Data.Address_En;
                                            BranchesObject2.Branch_Accountancy_Manager_Name_Ar = args.Data.Branch_Accountancy_Manager_Name_Ar;
                                            BranchesObject2.Branch_Accountancy_Manager_Name_En = args.Data.Branch_Accountancy_Manager_Name_En;
                                            BranchesObject2.Enabled = args.Data.Enabled;
                                            BranchesObject2.Archived = args.Data.Archived;
                                            BranchesObject2.Deleted = args.Data.Deleted;
                                            // Prevent Update Because This User Hasn't Permission
                                            if (Check_User_Super_Admin == "False")
                                            {
                                                await this.Toast_Permission_Failed.Show();
                                            }
                                            else
                                            {
                                                await iTbl_def_Company_Braches_yService.Tbl_def_Company_Braches_yUpdate(BranchesObject2);
                                                await this.Toast_Success.Show();
                                            }
                                        }

                                    }

                                }

                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
                @*----------------------------------- Grid    Department-----------------------------------*@
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@languageContainer.Keys["Company_Department_Grid"]"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="tab-content">
                            @*=================================================================================================*@
                            <div class="col-lg-12 control-section">
                                <div class="content-wrapper">
                                    <div class="row">
                                        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#7575ff;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Company_Department_Grid"]</div>
                                        <SfGrid ID="Grid" @ref="Grid2" DataSource="@DataSource_DepartmentsGrid" Width="100%" cssclass="" AllowExcelExport="true" AllowPaging="true" AllowResizing="true" AllowRowDragAndDrop="true" Toolbar="@(new string[] { "Add", "Delete", "Edit", "Update", "Cancel" , "Print" , "ExcelExport" , "Search"  })">
                                            <GridEvents OnToolbarClick="ToolbarClick" OnActionBegin="Actionbegin2" TValue="Tbl_def_Company_Departments_y"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Normal" Dialog="DialogParams2"></GridEditSettings>
                                            <GridColumns>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.ID) DefaultValue="0" IsIdentity="true" HeaderText="ID" IsPrimaryKey="true" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Company) HeaderText="@languageContainer.Keys["Company_Corporation_Name"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Branch) HeaderText="@languageContainer.Keys["Company_Corporation_Branch"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Title_Ar) HeaderText="@languageContainer.Keys["Company_Department_Name_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Title_En) HeaderText="@languageContainer.Keys["Company_Department_Name_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Address_Ar) HeaderText="@languageContainer.Keys["Company_Department_Address_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Address_En) HeaderText="@languageContainer.Keys["Company_Department_Address_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Executive_Manager_Name_Ar) HeaderText="@languageContainer.Keys["Company_Department_Manager_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Executive_Manager_Name_En) HeaderText="@languageContainer.Keys["Company_Department_Manager_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Department_Mobile_A) HeaderText="@languageContainer.Keys["Company_Department_Manager_Mobile"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Enabled) DefaultValue="1" EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Enabled"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Archived) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Archived"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(Tbl_def_Company_Departments_y.Deleted) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Deleted"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>
                            @code{
                                SfGrid<Tbl_def_Company_Departments_y> Grid2;


                                private object DialogParams2 = new
                                {
@@params2 = new DialogModel { MinHeight = "400px", Width = "450px" }
                                };

                            Tbl_def_Company_Departments_y DepartmentsObject = new Tbl_def_Company_Departments_y();
                            Tbl_def_Company_Departments_y DepartmentsObject2 = new Tbl_def_Company_Departments_y();

                            public async void Actionbegin2(ActionEventArgs<Tbl_def_Company_Departments_y> args)
                            {
                                string Used_Department = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select * from Def_Employees_api&Required_Field=Department");
                                string List_Department_Title_Ar = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Company_Departments_y&Required_Field=Department_Title_Ar");
                                string List_Department_Title_En = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Company_Departments_y&Required_Field=Department_Title_En");

                                // Delete Department

                                if (args.RequestType.ToString() == "Delete")
                                {
                                    // Prevent Delete Because This Element was used
                                    if (Used_Department.IndexOf(args.Data.Department_Title_Ar) != -1)
                                    {
                                        await this.Toast_Del_Failed.Show();
                                    }
                                    else if (Used_Department.IndexOf(args.Data.Department_Title_En) != -1)
                                    {
                                        await this.Toast_Del_Failed.Show();
                                    }
                                    // Prevent Delete Because This User Hasn't Permission
                                    else if (Check_User_Super_Admin == "False")
                                    {
                                        await this.Toast_Permission_Failed.Show();
                                    }
                                    // Prevent Delete If ID = 0 (It's Means That Id Didn't take His Place In DataBase)
                                    else if (args.Data.ID == 0)
                                    {
                                        await this.Toast_Reload_Failed.Show();
                                    }
                                    else
                                    {
                                        await iTbl_def_Company_Departments_yService.Tbl_def_Company_Departments_yDelete(args.Data.ID.Value);
                                        await this.Toast_Success.Show();
                                    }
                                }

                                else if (args.RequestType.ToString() == "Save")
                                {
                                    // Post Department

                                    if (args.Action == "add")
                                    {
                                        DepartmentsObject.Department_Company = args.Data.Department_Company;
                                        DepartmentsObject.Department_Branch = args.Data.Department_Branch;
                                        DepartmentsObject.Department_Title_Ar = args.Data.Department_Title_Ar;
                                        DepartmentsObject.Department_Title_En = args.Data.Department_Title_En;
                                        DepartmentsObject.Department_Address_Ar = args.Data.Department_Address_Ar;
                                        DepartmentsObject.Department_Address_En = args.Data.Department_Address_En;
                                        DepartmentsObject.Department_Executive_Manager_Name_Ar = args.Data.Department_Executive_Manager_Name_Ar;
                                        DepartmentsObject.Department_Executive_Manager_Name_En = args.Data.Department_Executive_Manager_Name_En;
                                        DepartmentsObject.Department_Mobile_A = args.Data.Department_Mobile_A;
                                        DepartmentsObject.Enabled = args.Data.Enabled;
                                        DepartmentsObject.Archived = args.Data.Archived;
                                        DepartmentsObject.Deleted = args.Data.Deleted;

                                        // Prevent Adding Because This Element is repeat
                                        if (List_Department_Title_Ar.IndexOf(args.Data.Department_Title_Ar) != -1)
                                        {
                                            await this.Toast_Add_Failed.Show();
                                        }
                                        else if (List_Department_Title_En.IndexOf(args.Data.Department_Title_En) != -1)
                                        {
                                            await this.Toast_Add_Failed.Show();
                                        }
                                        else
                                        {
                                            await iTbl_def_Company_Departments_yService.Tbl_def_Company_Departments_yInsert(DepartmentsObject);
                                            await this.Toast_Success.Show();
                                        }

                                    }
                                    else
                                    {
                                        // Put Departments

                                        DepartmentsObject2.ID = args.Data.ID;
                                        DepartmentsObject2.Department_Company = args.Data.Department_Company;
                                        DepartmentsObject2.Department_Branch = args.Data.Department_Branch;
                                        DepartmentsObject2.Department_Title_Ar = args.Data.Department_Title_Ar;
                                        DepartmentsObject2.Department_Title_En = args.Data.Department_Title_En;
                                        DepartmentsObject2.Department_Address_Ar = args.Data.Department_Address_Ar;
                                        DepartmentsObject2.Department_Address_En = args.Data.Department_Address_En;
                                        DepartmentsObject2.Department_Executive_Manager_Name_Ar = args.Data.Department_Executive_Manager_Name_Ar;
                                        DepartmentsObject2.Department_Executive_Manager_Name_En = args.Data.Department_Executive_Manager_Name_En;
                                        DepartmentsObject2.Department_Mobile_A = args.Data.Department_Mobile_A;
                                        DepartmentsObject2.Enabled = args.Data.Enabled;
                                        DepartmentsObject2.Archived = args.Data.Archived;
                                        DepartmentsObject2.Deleted = args.Data.Deleted;

                                        // Prevent Update Because This User Hasn't Permission
                                        if (Check_User_Super_Admin == "False")
                                        {
                                            await this.Toast_Permission_Failed.Show();
                                        }
                                        else
                                        {
                                            await iTbl_def_Company_Departments_yService.Tbl_def_Company_Departments_yUpdate(DepartmentsObject2);
                                            await this.Toast_Success.Show();
                                        }

                                    }
                                }

                            }

                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
                @*----------------------------------- Grid    Licences-----------------------------------*@
                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@languageContainer.Keys["Company_Operating_Licences"]"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="tab-content">
                            @*=================================================================================================*@
                            <div class="col-lg-12 control-section">
                                <div class="content-wrapper">
                                    <div class="row">
                                        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#7575ff;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Company_Operating_Licences"]</div>
                                        <SfGrid ID="Grid" @ref="Grid3" DataSource="@DataSource_LicencesGrid" Width="100%" cssclass="" AllowPaging="true" AllowResizing="true" AllowExcelExport="true" AllowRowDragAndDrop="true" Toolbar="@(new string[] { "Add", "Delete", "Edit", "Update", "Cancel" , "Print" , "ExcelExport" , "Search" })">
                                            <GridEvents OnToolbarClick="ToolbarClick" OnActionBegin="Actionbegin3" TValue="VM_Def_Licences"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams3"></GridEditSettings>
                                            <GridColumns>
                                                <GridColumn Field=@nameof(VM_Def_Licences.ID) IsIdentity="true" HeaderText="ID" IsPrimaryKey="true" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Title_Ar) HeaderText="@languageContainer.Keys["Company_Licence_Title_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Title_En) HeaderText="@languageContainer.Keys["Company_Licence_Title_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Issuer_Ar) HeaderText="@languageContainer.Keys["Company_Licence_Issuer_Ar"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Issuer_En) HeaderText="@languageContainer.Keys["Company_Licence_Issuer_En"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_From) HeaderText="@languageContainer.Keys["Company_Licence_From"]" EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_To) HeaderText="@languageContainer.Keys["Company_Licence_To"]" EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Renew_Date) HeaderText="@languageContainer.Keys["Company_Licence_Renew_Date"]" EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Renew_Fine) HeaderText="@languageContainer.Keys["Company_Licence_Renew_Fine"]" TextAlign="TextAlign.Center" ValidationRules="@(new { number = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Licence_Renewal_Fees) HeaderText="@languageContainer.Keys["Company_Licence_Renewal_Fees"]" TextAlign="TextAlign.Center" ValidationRules="@(new { number = true  })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Enabled) DefaultValue="1" EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Enabled"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Archived) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Archived"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Licences.Deleted) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Deleted"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>
                            @code{
                                SfGrid<VM_Def_Licences> Grid3;

                                private object DialogParams3 = new
                                {
@@params3 = new DialogModel { MinHeight = "400px", Width = "450px" }
                                };

                            VM_Def_Licences LicencesObject = new VM_Def_Licences();
                            VM_Def_Licences LicencesObject2 = new VM_Def_Licences();

                            public async void Actionbegin3(ActionEventArgs<VM_Def_Licences> args)
                            {
                                string List_Licence_Title_Ar = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Licences&Required_Field=Licence_Title_Ar");
                                string List_Licence_Title_En = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Licences&Required_Field=Licence_Title_En");

                                // Delete Licence

                                if (args.RequestType.ToString() == "Delete")
                                {
                                    // Prevent Delete Because This User Hasn't Permission
                                    if (Check_User_Super_Admin == "False")
                                    {
                                        await this.Toast_Permission_Failed.Show();
                                    }
                                    // Prevent Delete If ID = 0 (It's Means That Id Didn't take His Place In DataBase)
                                    else if (args.Data.ID == 0)
                                    {
                                        await this.Toast_Reload_Failed.Show();
                                    }
                                    else
                                    {
                                        await httpClient.DeleteAsync(Configuration.GetValue<string>("Api") + "/api/Licences_api/" + args.Data.ID);
                                        await this.Toast_Success.Show();
                                    }
                                }
                                // Post Licence
                                else if (args.RequestType.ToString() == "Save")
                                {
                                    if (args.Action == "add")
                                    {
                                        try
                                        {
                                            LicencesObject.Licence_Title_Ar = args.Data.Licence_Title_Ar;
                                            LicencesObject.Licence_Title_En = args.Data.Licence_Title_En;
                                            LicencesObject.Licence_Issuer_Ar = args.Data.Licence_Issuer_Ar;
                                            LicencesObject.Licence_Issuer_En = args.Data.Licence_Issuer_En;
                                            LicencesObject.Licence_From = args.Data.Licence_From;
                                            LicencesObject.Licence_To = args.Data.Licence_To;
                                            LicencesObject.Licence_Renew_Date = args.Data.Licence_Renew_Date;
                                            LicencesObject.Licence_Renew_Fine = args.Data.Licence_Renew_Fine;
                                            LicencesObject.Licence_Renewal_Fees = args.Data.Licence_Renewal_Fees;
                                            LicencesObject.Enabled = args.Data.Enabled;
                                            LicencesObject.Archived = args.Data.Archived;
                                            LicencesObject.Deleted = args.Data.Deleted;

                                            // Prevent Adding Because This Element is repeat
                                            if (List_Licence_Title_Ar.IndexOf(args.Data.Licence_Title_Ar) != -1)
                                            {
                                                await this.Toast_Add_Failed.Show();
                                            }
                                            else if (List_Licence_Title_En.IndexOf(args.Data.Licence_Title_En) != -1)
                                            {
                                                await this.Toast_Add_Failed.Show();
                                            }
                                            else
                                            {
                                                await httpClient.PostJsonAsync(Configuration.GetValue<string>("Api") + "/api/Licences_api", LicencesObject);
                                                await this.Toast_Success.Show();
                                            }
                                        }
                                        catch (SqlException SQLex)
                                        {
                                            Debug.WriteLine("SQLex >> " + SQLex.Message);
                                        }
                                        catch (Exception ex)
                                        {
                                            Debug.WriteLine("ex >> " + ex.Message);
                                        }


                                    }
                                    else
                                    {
                                        // Put Licence

                                        LicencesObject2.ID = args.Data.ID;
                                        LicencesObject2.Licence_Title_Ar = args.Data.Licence_Title_Ar;
                                        LicencesObject2.Licence_Title_En = args.Data.Licence_Title_En;
                                        LicencesObject2.Licence_Issuer_Ar = args.Data.Licence_Issuer_Ar;
                                        LicencesObject2.Licence_Issuer_En = args.Data.Licence_Issuer_En;
                                        LicencesObject2.Licence_From = args.Data.Licence_From;
                                        LicencesObject2.Licence_To = args.Data.Licence_To;
                                        LicencesObject2.Licence_Renew_Date = args.Data.Licence_Renew_Date;
                                        LicencesObject2.Licence_Renew_Fine = args.Data.Licence_Renew_Fine;
                                        LicencesObject2.Licence_Renewal_Fees = args.Data.Licence_Renewal_Fees;
                                        LicencesObject2.Enabled = args.Data.Enabled;
                                        LicencesObject2.Archived = args.Data.Archived;
                                        LicencesObject2.Deleted = args.Data.Deleted;

                                        // Prevent Update Because This User Hasn't Permission
                                        if (Check_User_Super_Admin == "False")
                                        {
                                            await this.Toast_Permission_Failed.Show();
                                        }
                                        else
                                        {
                                            await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Licences_api?id=" + args.Data.ID.ToString(), LicencesObject2);
                                            await this.Toast_Success.Show();
                                        }
                                    }

                                }

                            }

                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
                @*=========================================  End  Licence Tab    ========================================================*@

            </TabItems>
        </SfTab>

        @*----------------------------------- /  Grids Tabs -----------------------------------*@

    </div>
</div>
@*----------------------------------------------------------------------------*@
@*--------EDIT FORMS EDIT FORMS EDIT FORMS EDIT FORMS EDIT FORMS EDIT FORMS --*@
@*----------------------------------------------------------------------------*@

@*----------------------------------- Edit Form B   Corporation Definition----------------------------*@

<SfDialog Target="body" @ref="EditDialogObj_Card_B" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_B_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Company_Corporation_Definition"]" AnimationSettings="@dialogAnnimation_B">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_B_"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_B">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Title_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Title_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Title_Ar)" />
            </div>

            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Title_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Title_En"></SfTextBox>
                <ValidationMessage For="@(() => Title_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Slogan_A_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Slogan_A_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Slogan_A_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Slogan_A_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Slogan_A_En"></SfTextBox>
                <ValidationMessage For="@(() => Slogan_A_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Slogan_B_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Slogan_B_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Slogan_B_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Slogan_B_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Slogan_B_En"></SfTextBox>
                <ValidationMessage For="@(() => Slogan_B_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Activities_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Activities_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Activities_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Activities_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Activities_En"></SfTextBox>
                <ValidationMessage For="@(() => Activities_En)" />
            </div>
            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_B">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_B">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
@*----------------------------------- Edit Form C ----------------------------*@
<SfDialog Target="body" @ref="EditDialogObj_Card_C" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_C_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Address"]" AnimationSettings="@dialogAnnimation_C">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_C"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_C">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='المركز الرئيسي'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Head_Office_Address_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Head_Office_Address_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='المصنع'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Factory_Address_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Factory_Address_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='المخزن'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Inventory_Address_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Inventory_Address_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='Head Office'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Head_Office_Address_En"></SfTextBox>
                <ValidationMessage For="@(() => Head_Office_Address_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='Factory'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Factory_Address_En"></SfTextBox>
                <ValidationMessage For="@(() => Factory_Address_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='Inventory'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Inventory_Address_En"></SfTextBox>
                <ValidationMessage For="@(() => Inventory_Address_En)" />
            </div>
            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_C">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_C">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
@*----------------------------------- Edit Form D ----------------------------*@
<SfDialog Target="body" @ref="EditDialogObj_Card_D" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_D_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Company_Contact"]" AnimationSettings="@dialogAnnimation_D">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_D_"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_D">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["MailBox"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Mail_Box"></SfTextBox>
                <ValidationMessage For="@(() => Mail_Box)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_WebSite_Url"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@WebSite_Url"></SfTextBox>
                <ValidationMessage For="@(() => WebSite_Url)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_WebSite_Url"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@WebSite_Url"></SfTextBox>
                <ValidationMessage For="@(() => WebSite_Url)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Facebook"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Facebook"></SfTextBox>
                <ValidationMessage For="@(() => Facebook)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Tweeter"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Tweeter"></SfTextBox>
                <ValidationMessage For="@(() => Tweeter)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Email"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Email"></SfTextBox>
                <ValidationMessage For="@(() => Email)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Mobile_A"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Mobile_A"></SfTextBox>
                <ValidationMessage For="@(() => Mobile_A)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Mobile_B"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Mobile_B"></SfTextBox>
                <ValidationMessage For="@(() => Mobile_B)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Mobile_C"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Mobile_C"></SfTextBox>
                <ValidationMessage For="@(() => Mobile_C)" />
            </div>            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Mobile_D"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Mobile_D"></SfTextBox>
                <ValidationMessage For="@(() => Mobile_D)" />
            </div>            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Phone_A"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Phone_A"></SfTextBox>
                <ValidationMessage For="@(() => Phone_A)" />
            </div>            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Phone_B"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Phone_B"></SfTextBox>
                <ValidationMessage For="@(() => Phone_B)" />
            </div>            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Phone_C"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Phone_C"></SfTextBox>
                <ValidationMessage For="@(() => Phone_C)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Phone_D"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Phone_D"></SfTextBox>
                <ValidationMessage For="@(() => Phone_D)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Suggestions_Complains_Phone"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Suggestions_Complains_Phone"></SfTextBox>
                <ValidationMessage For="@(() => Suggestions_Complains_Phone)" />
            </div>
            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_D">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_D">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>

@*----------------------------------- Edit Form E ----------------------------*@
<SfDialog Target="body" @ref="EditDialogObj_Card_E" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_E_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Company_Owners"]" AnimationSettings="@dialogAnnimation_E">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_E_"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_E">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Owner_Main"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Owner_Main"></SfTextBox>
                <ValidationMessage For="@(() => Owner_Main)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Owner_A"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Owner_A"></SfTextBox>
                <ValidationMessage For="@(() => Owner_A)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Owner_B"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Owner_B"></SfTextBox>
                <ValidationMessage For="@(() => Owner_B)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Owner_C"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Owner_C"></SfTextBox>
                <ValidationMessage For="@(() => Owner_C)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Owner_D"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Owner_D"></SfTextBox>
                <ValidationMessage For="@(() => Owner_D)" />
            </div>
            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_E">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_E">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
@*----------------------------------- Edit Form F             Managers      ----------------------------*@
<SfDialog Target="body" @ref="EditDialogObj_Card_F" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_F_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Company_Managers"]" AnimationSettings="@dialogAnnimation_F">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_F_"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_F">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Executive_Manager_Name_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Executive_Manager_Name_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Executive_Manager_Name_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Executive_Manager_Name_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Executive_Manager_Name_En"></SfTextBox>
                <ValidationMessage For="@(() => Executive_Manager_Name_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Executive_Manager_Phone"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Executive_Manager_Phone"></SfTextBox>
                <ValidationMessage For="@(() => Executive_Manager_Phone)" />
            </div>
            <div title="@languageContainer.Keys["Company_Executive_Manager_Signature"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Executive_Manager_Signature"]</label>
                <img width="30" height="30" src="css/UploadsFile/@tbl_def_Company_y.Executive_Manager_Signature" />
                <InputFile OnChange="HandleFileSelected_Executive_Manager_Signature" @bind-Value="@Executive_Manager_Signature" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Accountancy_Manager_Name_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Accountancy_Manager_Name_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Accountancy_Manager_Name_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Accountancy_Manager_Name_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Accountancy_Manager_Name_En"></SfTextBox>
                <ValidationMessage For="@(() => Accountancy_Manager_Name_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Accountancy_Manager_Phone"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Accountancy_Manager_Phone"></SfTextBox>
                <ValidationMessage For="@(() => Accountancy_Manager_Phone)" />
            </div>
            <div title="@languageContainer.Keys["Company_Accountancy_Manager_Signature"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Accountancy_Manager_Signature"]</label>
                <img width="30" height="30" src="css/UploadsFile/@tbl_def_Company_y.Accountancy_Manager_Signature" />
                <InputFile OnChange="HandleFileSelected_Accountancy_Manager_Signature" @bind-Value="@Accountancy_Manager_Signature" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_HR_Manager_Name_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@HR_Manager_Name_Ar"></SfTextBox>
                <ValidationMessage For="@(() => HR_Manager_Name_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_HR_Manager_Name_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@HR_Manager_Name_En"></SfTextBox>
                <ValidationMessage For="@(() => HR_Manager_Name_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_HR_Manager_Phone"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@HR_Manager_Phone"></SfTextBox>
                <ValidationMessage For="@(() => HR_Manager_Phone)" />
            </div>
            <div title="@languageContainer.Keys["Company_HR_Manager_Signature"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_HR_Manager_Signature"]</label>
                <img width="30" height="30" src="css/UploadsFile/@tbl_def_Company_y.HR_Manager_Name_Signature" />
                <InputFile OnChange="HandleFileSelected_HR_Manager_Signature" @bind-Value="@HR_Manager_Signature" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Sales_Manager_Name_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Sales_Manager_Name_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Sales_Manager_Name_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Sales_Manager_Name_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Sales_Manager_Name_En"></SfTextBox>
                <ValidationMessage For="@(() => Sales_Manager_Name_En)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Sales_Manager_Phone"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Sales_Manager_Phone"></SfTextBox>
                <ValidationMessage For="@(() => Sales_Manager_Phone)" />
            </div>

            <div title="@languageContainer.Keys["Company_Sales_Manager_Name_Signature"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Sales_Manager_Name_Signature"]</label>
                <img width="30" height="30" src="css/UploadsFile/@tbl_def_Company_y.Sales_Manager_Name_Signature" />
                <InputFile OnChange="HandleFileSelected_Sales_Manager_Signature" @bind-Value="@Sales_Manager_Signature" />
            </div>

            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_F">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_F">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
@*----------------------------------- Edit Form H ----------------------------*@
<SfDialog Target="body" @ref="EditDialogObj_Card_H" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_H_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Company_Class_And_Tax"]" AnimationSettings="@dialogAnnimation_H">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_H_"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_H">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Class"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Class_Name"></SfTextBox>
                <ValidationMessage For="@(() => Class_Name)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Tax_Registration_Number"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Tax_Registration_Number"></SfTextBox>
                <ValidationMessage For="@(() => Tax_Registration_Number)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Notes_Ar"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Notes_Ar"></SfTextBox>
                <ValidationMessage For="@(() => Notes_Ar)" />
            </div>
            <div style="direction:@languageContainer.Keys["Text_Direction"]" class="name-container">
                <SfTextBox CssClass='doctor-name e-field' Placeholder='@languageContainer.Keys["Company_Notes_En"]'
                           FloatLabelType="@FloatLabelType.Always"
                           @bind-Value="@Notes_En"></SfTextBox>
                <ValidationMessage For="@(() => Notes_En)" />
            </div>
            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_H">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_H">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>
@*----------------------------------- Edit Form I   Logo And Banners----------------------------*@
<SfDialog Target="body" @ref="EditDialogObj_Card_I" Width="390px" CssClass='@languageContainer.Keys["Text_Align"]'
          IsModal="true" @bind-Visible="@editVisible_Card_I_" ShowCloseIcon="true"
          Header="@languageContainer.Keys["Company_Logos_And_Banners"]" AnimationSettings="@dialogAnnimation_I">
    <ChildContent>
        <DialogEvents Opened="@EditDialogOpen_I_"></DialogEvents>
        <EditForm Model="@tbl_def_Company_y" OnValidSubmit="@HandleSubmit_I">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div title="@languageContainer.Keys["Company_Logo_Color_Big"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Logo_Color_Big"]</label>
                <img width="40" height="40" src="css/UploadsFile/@tbl_def_Company_y.Logo_Color_Big" />
                <InputFile OnChange="HandleFileSelected_Logo_Color_Big" @bind-Value="@Logo_Color_Big" />
            </div>

            <div title="@languageContainer.Keys["Company_Logo_Color_Small"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Logo_Color_Small"]</label>
                <img width="30" height="30" src="css/UploadsFile/@tbl_def_Company_y.Logo_Color_Small" />
                <InputFile OnChange="HandleFileSelected_Logo_Color_Small" @bind-Value="@Logo_Color_Small" />
            </div>

            <div title="@languageContainer.Keys["Company_Logo_Print_Big"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Logo_Print_Big"]</label>
                <img width="40" height="40" src="css/UploadsFile/@tbl_def_Company_y.Logo_Print_Big" />
                <InputFile OnChange="HandleFileSelected_Logo_Print_Big" @bind-Value="@Logo_Print_Big" />
            </div>

            <div title="@languageContainer.Keys["Company_Logo_Print_Small"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Logo_Print_Small"]</label>
                <img width="30" height="30" src="css/UploadsFile/@tbl_def_Company_y.Logo_Print_Small" />
                <InputFile OnChange="HandleFileSelected_Logo_Print_Small" @bind-Value="@Logo_Print_Small" />
            </div>

            <div title="@languageContainer.Keys["Company_Banner_Big"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Banner_Big"]</label>
                <img width="90" height="30" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Banner_Big" />
                <InputFile OnChange="HandleFileSelected_Banner_Big" @bind-Value="@Banner_Big" />
            </div>

            <div title="@languageContainer.Keys["Company_Banner_small"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Company_Banner_small"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Banner_small" />
                <InputFile OnChange="HandleFileSelected_Banner_small" @bind-Value="@Banner_small" />
            </div>

            @*<div title="@languageContainer.Keys["Print_Technical"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Print_Technical"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Technical" />
                <InputFile OnChange="HandleFileSelected_Print_Technical" @bind-Value="@Print_Technical" />
            </div>

            <div title="@languageContainer.Keys["Print_Financial"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Print_Financial"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Financial" />
                <InputFile OnChange="HandleFileSelected_Print_Financial" @bind-Value="@Print_Financial" />
            </div>

            <div title="@languageContainer.Keys["Print_Managing"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Print_Managing"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Managing" />
                <InputFile OnChange="HandleFileSelected_Print_Managing" @bind-Value="@Print_Managing" />
            </div>

            <div title="@languageContainer.Keys["Print_Inventory"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Print_Inventory"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Inventory" />
                <InputFile OnChange="HandleFileSelected_Print_Inventory" @bind-Value="@Print_Inventory" />
            </div>

            <div title="@languageContainer.Keys["Print_Purchases"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Print_Purchases"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Purchases" />
                <InputFile OnChange="HandleFileSelected_Print_Purchases" @bind-Value="@Print_Purchases" />
            </div>

            <div title="@languageContainer.Keys["Print_Sales"]" style="direction:@languageContainer.Keys["Text_Direction"];box-shadow: 0 1px 4px 1px rgba(0,0,0,0.10);margin:5px;padding:5px">
                <label class="font-weight-bold">@languageContainer.Keys["Print_Sales"]</label>
                <img width="60" height="25" style="border:solid 1px gray" src="css/UploadsFile/@tbl_def_Company_y.Print_Sales" />
                <InputFile OnChange="HandleFileSelected_Print_Sales" @bind-Value="@Print_Sales" />
            </div>*@

            <div class="e-footer-content">
                <div class="button-container text-center">
                    <button type="button" class="e-btn e-normal" @onclick="@onCancelClick_I">@languageContainer.Keys["cancel"]</button>
                    <button type="button" class="e-btn e-normal e-primary" @onclick="@UpdateEditModel_I">@languageContainer.Keys["Edit"]</button>
                </div>
            </div>
        </EditForm>
    </ChildContent>
</SfDialog>

@*----------------------------------- Upload Images----------------------------------------------*@

@code{
    IFileListEntry file;

    async Task HandleFileSelected_Banner_small(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Banner_small = file.Name;
        }
    }

    async Task HandleFileSelected_Banner_Big(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Banner_Big = file.Name;
        }
    }

    async Task HandleFileSelected_Logo_Print_Small(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Logo_Print_Small = file.Name;
        }
    }

    async Task HandleFileSelected_Logo_Print_Big(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Logo_Print_Big = file.Name;
        }
    }

    async Task HandleFileSelected_Logo_Color_Small(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Logo_Color_Small = file.Name;
        }
    }

    async Task HandleFileSelected_Logo_Color_Big(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Logo_Color_Big = file.Name;
        }
    }

    //async Task HandleFileSelected_Print_Technical(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        await fileupload.Upload(file);
    //        Print_Technical = file.Name;
    //    }
    //}   
    //async Task HandleFileSelected_Print_Financial(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        await fileupload.Upload(file);
    //        Print_Financial = file.Name;
    //    }
    //} 
    //async Task HandleFileSelected_Print_Managing(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        await fileupload.Upload(file);
    //        Print_Managing = file.Name;
    //    }
    //}  
    //async Task HandleFileSelected_Print_Inventory(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        await fileupload.Upload(file);
    //        Print_Inventory = file.Name;
    //    }
    //}  
    //async Task HandleFileSelected_Print_Purchases(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        await fileupload.Upload(file);
    //        Print_Purchases = file.Name;
    //    }
    //}
    //async Task HandleFileSelected_Print_Sales(IFileListEntry[] files)
    //{
    //    file = files.FirstOrDefault();
    //    if (file != null)
    //    {
    //        await fileupload.Upload(file);
    //        Print_Sales = file.Name;
    //    }
    //}


    async Task HandleFileSelected_Sales_Manager_Signature(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Sales_Manager_Signature = file.Name;
        }
    }

    async Task HandleFileSelected_HR_Manager_Signature(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            HR_Manager_Signature = file.Name;
        }
    }

    async Task HandleFileSelected_Accountancy_Manager_Signature(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Accountancy_Manager_Signature = file.Name;
        }
    }

    async Task HandleFileSelected_Executive_Manager_Signature(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        if (file != null)
        {
            await fileupload.Upload(file);
            Executive_Manager_Signature = file.Name;
        }
    }

}

@*----------------------------------- / Upload Images----------------------------------------------*@

@*---------------------------------------------------------------------------------*@
@*------------ CODE CODE CODE CODE CODE CODE CODE CODE CODE CODE CODE CODE --------*@
@*---------------------------------------------------------------------------------*@
@*---------------------------------------------------------------------------------*@


@*----------------------------------- Code  B     Corporation Defintion  -------------------------------------*@
@code{

    string Title_Ar = "";
    string Title_En = "";
    string Slogan_A_Ar = "";
    string Slogan_A_En = "";
    string Slogan_B_Ar = "";
    string Slogan_B_En = "";
    string Activities_Ar = "";
    string Activities_En = "";

    string QueryStrign_B = "";
    private DialogAnimationSettings dialogAnnimation_B { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_B;
    public bool editVisible_Card_B_ { get; set; } = false;
    private void onCancelClick_B(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_B_ = false;
    }
    public void HandleSubmit_B()
    {
        //editVisible = false;
    }
    public void onEdit_CardB()
    {
        editVisible_Card_B_ = true;
    }
    public async Task UpdateEditModel_B(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //// verify data befoe Updating ------------------------------------------------
        if ((Title_Ar.Length > 2) && (Title_En.Length > 2))
        {

            tbl_def_Company_y.Title_Ar = Title_Ar;
            tbl_def_Company_y.Title_En = Title_En;
            tbl_def_Company_y.Slogan_A_Ar = Slogan_A_Ar;
            tbl_def_Company_y.Slogan_A_En = Slogan_A_En;
            tbl_def_Company_y.Slogan_B_Ar = Slogan_B_Ar;
            tbl_def_Company_y.Slogan_B_En = Slogan_B_En;
            tbl_def_Company_y.Activities_Ar = Activities_Ar;
            tbl_def_Company_y.Activities_En = Activities_En;

            // Prevent Update Because This User Hasn't Permission
            if (Check_User_Super_Admin == "False")
            {
                await this.Toast_Permission_Failed.Show();
            }
            else
            {
                await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
                await this.Toast_Success.Show();
            }
        }
        else
        {
            //Show Erro Toast_Little_Length
            await this.Toast_Little_Length.Show();
        }
        editVisible_Card_B_ = false;
    }
    public void EditDialogOpen_B_()
    {
        Title_Ar = tbl_def_Company_y.Title_Ar;
        Title_En = tbl_def_Company_y.Title_En;
        Slogan_A_Ar = tbl_def_Company_y.Slogan_A_Ar;
        Slogan_A_En = tbl_def_Company_y.Slogan_A_En;
        Slogan_B_Ar = tbl_def_Company_y.Slogan_B_Ar;
        Slogan_B_En = tbl_def_Company_y.Slogan_B_En;
        Activities_Ar = tbl_def_Company_y.Activities_Ar;
        Activities_En = tbl_def_Company_y.Activities_En;

    }
}
@*----------------------------------- Code  C -------------------------------------*@
@code{
    string QueryStrign_C = "";
    string Head_Office_Address_Ar = "";
    string Factory_Address_Ar = "";
    string Inventory_Address_Ar = "";
    string Head_Office_Address_En = "";
    string Factory_Address_En = "";
    string Inventory_Address_En = "";
    private DialogAnimationSettings dialogAnnimation_C { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_C;
    public bool editVisible_Card_C_ { get; set; } = false;
    private void onCancelClick_C(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_C_ = false;
    }
    public void HandleSubmit_C()
    {
        //editVisible = false;
    }
    public void onEdit_CardC()
    {
        editVisible_Card_C_ = true;
    }
    public async Task UpdateEditModel_C(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //// verify data befoe Updating ------------------------------------------------
        if ((Head_Office_Address_Ar.Length > 2) && (Head_Office_Address_En.Length > 2))
        {
            tbl_def_Company_y.Head_Office_Address_Ar = Head_Office_Address_Ar;
            tbl_def_Company_y.Head_Office_Address_En = Head_Office_Address_En;
            tbl_def_Company_y.Factory_Address_Ar = Factory_Address_Ar;
            tbl_def_Company_y.Factory_Address_En = Factory_Address_Ar;
            tbl_def_Company_y.Inventory_Address_Ar = Inventory_Address_Ar;
            tbl_def_Company_y.Inventory_Address_En = Inventory_Address_En;

            // Prevent Update Because This User Hasn't Permission
            if (Check_User_Super_Admin == "False")
            {
                await this.Toast_Permission_Failed.Show();
            }
            else
            {
                await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
                await this.Toast_Success.Show();
            }
        }
        else
        {
            //Show Erro Toast_Little_Length
            await this.Toast_Little_Length.Show();
        }
        editVisible_Card_C_ = false;
    }
    public void EditDialogOpen_C()
    {
        Head_Office_Address_Ar = tbl_def_Company_y.Head_Office_Address_Ar;
        Head_Office_Address_En = tbl_def_Company_y.Head_Office_Address_En;
        Factory_Address_Ar = tbl_def_Company_y.Factory_Address_Ar;
        Factory_Address_Ar = tbl_def_Company_y.Factory_Address_En;
        Inventory_Address_Ar = tbl_def_Company_y.Inventory_Address_Ar;
        Inventory_Address_En = tbl_def_Company_y.Inventory_Address_En;
    }
}
@*----------------------------------- Code  D -------------------------------------*@
@code{
    string Mail_Box = "";
    string WebSite_Url = "";
    string Facebook = "";
    string Tweeter = "";
    string Email = "";
    string Mobile_A = "";
    string Mobile_B = "";
    string Mobile_C = "";
    string Mobile_D = "";
    string Phone_A = "";
    string Phone_B = "";
    string Phone_C = "";
    string Phone_D = "";
    string Suggestions_Complains_Phone = "";

    string QueryStrign_D = "";
    private DialogAnimationSettings dialogAnnimation_D { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_D;
    public bool editVisible_Card_D_ { get; set; } = false;
    private void onCancelClick_D(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_D_ = false;
    }
    public void HandleSubmit_D()
    {
        //editVisible = false;
    }
    public void onEdit_CardD()
    {
        editVisible_Card_D_ = true;
    }
    public async Task UpdateEditModel_D(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //// verify data befoe Updating ------------------------------------------------
        if (Mail_Box.Length > 2)
        {

            tbl_def_Company_y.Mail_Box = Mail_Box;
            tbl_def_Company_y.WebSite_Url = WebSite_Url;
            tbl_def_Company_y.Facebook = Facebook;
            tbl_def_Company_y.Tweeter = Tweeter;
            tbl_def_Company_y.Email = Email;
            tbl_def_Company_y.Mobile_A = Mobile_A;
            tbl_def_Company_y.Mobile_B = Mobile_B;
            tbl_def_Company_y.Mobile_C = Mobile_C;
            tbl_def_Company_y.Mobile_D = Mobile_D;
            tbl_def_Company_y.Phone_A = Phone_A;
            tbl_def_Company_y.Phone_B = Phone_B;
            tbl_def_Company_y.Phone_C = Phone_C;
            tbl_def_Company_y.Phone_D = Phone_D;
            tbl_def_Company_y.Suggestions_Complains_Phone = Suggestions_Complains_Phone;

            // Prevent Update Because This User Hasn't Permission
            if (Check_User_Super_Admin == "False")
            {
                await this.Toast_Permission_Failed.Show();
            }
            else
            {
                await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
                await this.Toast_Success.Show();
            }
        }
        else
        {
            //Show Erro Toast_Little_Length
            await this.Toast_Little_Length.Show();
        }
        editVisible_Card_D_ = false;
    }
    public void EditDialogOpen_D_()
    {
        Mail_Box = tbl_def_Company_y.Mail_Box;
        WebSite_Url = tbl_def_Company_y.WebSite_Url;
        Facebook = tbl_def_Company_y.Facebook;
        Tweeter = tbl_def_Company_y.Tweeter;
        Email = tbl_def_Company_y.Email;
        Mobile_A = tbl_def_Company_y.Mobile_A;
        Mobile_B = tbl_def_Company_y.Mobile_B;
        Mobile_C = tbl_def_Company_y.Mobile_C;
        Mobile_D = tbl_def_Company_y.Mobile_D;
        Phone_A = tbl_def_Company_y.Phone_A;
        Phone_B = tbl_def_Company_y.Phone_B;
        Phone_C = tbl_def_Company_y.Phone_C;
        Phone_D = tbl_def_Company_y.Phone_D;
        Suggestions_Complains_Phone = tbl_def_Company_y.Suggestions_Complains_Phone;
    }
}
@*----------------------------------- Code  E -------------------------------------*@
@code{
    string Owner_Main = "";
    string Owner_A = "";
    string Owner_B = "";
    string Owner_C = "";
    string Owner_D = "";

    string QueryStrign_E = "";
    private DialogAnimationSettings dialogAnnimation_E { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_E;
    public bool editVisible_Card_E_ { get; set; } = false;
    private void onCancelClick_E(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_E_ = false;
    }
    public void HandleSubmit_E()
    {
        //editVisible = false;
    }
    public void onEdit_CardE()
    {
        editVisible_Card_E_ = true;
    }
    public async Task UpdateEditModel_E(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //// verify data befoe Updating ------------------------------------------------
        if (Owner_Main.Length > 2)
        {

            tbl_def_Company_y.Owner_Main = Owner_Main;
            tbl_def_Company_y.Owner_A = Owner_A;
            tbl_def_Company_y.Owner_B = Owner_B;
            tbl_def_Company_y.Owner_C = Owner_C;
            tbl_def_Company_y.Owner_D = Owner_D;

            // Prevent Update Because This User Hasn't Permission
            if (Check_User_Super_Admin == "False")
            {
                await this.Toast_Permission_Failed.Show();
            }
            else
            {
                await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
                await this.Toast_Success.Show();
            }

        }
        else
        {
            //Show Erro Toast_Little_Length
            await this.Toast_Little_Length.Show();
        }
        editVisible_Card_E_ = false;
    }
    public void EditDialogOpen_E_()
    {
        Owner_Main = tbl_def_Company_y.Owner_Main;
        Owner_A = tbl_def_Company_y.Owner_A;
        Owner_B = tbl_def_Company_y.Owner_B;
        Owner_C = tbl_def_Company_y.Owner_C;
        Owner_D = tbl_def_Company_y.Owner_D;
    }
}
@*----------------------------------- Code  F  Managers-------------------------------------*@
@code{

    string Executive_Manager_Name_Ar = "";
    string Executive_Manager_Name_En = "";
    string Executive_Manager_Phone = "";
    string Executive_Manager_Signature = "";
    string Accountancy_Manager_Name_Ar = "";
    string Accountancy_Manager_Name_En = "";
    string Accountancy_Manager_Phone = "";
    string Accountancy_Manager_Signature = "";
    string HR_Manager_Name_Ar = "";
    string HR_Manager_Name_En = "";
    string HR_Manager_Phone = "";
    string HR_Manager_Signature = "";
    string Sales_Manager_Name_Ar = "";
    string Sales_Manager_Name_En = "";
    string Sales_Manager_Phone = "";
    string Sales_Manager_Signature = "";

    string QueryStrign_F = "";
    private DialogAnimationSettings dialogAnnimation_F { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_F;
    public bool editVisible_Card_F_ { get; set; } = false;
    private void onCancelClick_F(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_F_ = false;
    }
    public void HandleSubmit_F()
    {
        //editVisible = false;
    }
    public void onEdit_CardF()
    {
        editVisible_Card_F_ = true;
    }
    public async Task UpdateEditModel_F(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //// verify data befoe Updating ------------------------------------------------
        if ((Executive_Manager_Name_Ar.Length > 2) && (Executive_Manager_Name_En.Length > 2))
        {

            tbl_def_Company_y.Executive_Manager_Name_Ar = Executive_Manager_Name_Ar;
            tbl_def_Company_y.Executive_Manager_Name_En = Executive_Manager_Name_En;
            tbl_def_Company_y.Executive_Manager_Phone = Executive_Manager_Phone;
            tbl_def_Company_y.Executive_Manager_Signature = Executive_Manager_Signature;
            tbl_def_Company_y.Accountancy_Manager_Name_Ar = Accountancy_Manager_Name_Ar;
            tbl_def_Company_y.Accountancy_Manager_Name_En = Accountancy_Manager_Name_En;
            tbl_def_Company_y.Accountancy_Manager_Phone = Accountancy_Manager_Phone;
            tbl_def_Company_y.Accountancy_Manager_Signature = Accountancy_Manager_Signature;
            tbl_def_Company_y.HR_Manager_Name_Ar = HR_Manager_Name_Ar;
            tbl_def_Company_y.HR_Manager_Name_En = HR_Manager_Name_En;
            tbl_def_Company_y.HR_Manager_Name_Phone = HR_Manager_Phone;
            tbl_def_Company_y.HR_Manager_Name_Signature = HR_Manager_Signature;
            tbl_def_Company_y.Sales_Manager_Name_Ar = Sales_Manager_Name_Ar;
            tbl_def_Company_y.Sales_Manager_Name_En = Sales_Manager_Name_En;
            tbl_def_Company_y.Sales_Manager_Name_Phone = Sales_Manager_Phone;
            tbl_def_Company_y.Sales_Manager_Name_Signature = Sales_Manager_Signature;

            // Prevent Update Because This User Hasn't Permission
            if (Check_User_Super_Admin == "False")
            {
                await this.Toast_Permission_Failed.Show();
            }
            else
            {
                await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
                await this.Toast_Success.Show();
            }
        }
        else
        {
            //Show Erro Toast_Little_Length
            await this.Toast_Little_Length.Show();
        }
        editVisible_Card_F_ = false;
    }
    public void EditDialogOpen_F_()
    {
        Executive_Manager_Name_Ar = tbl_def_Company_y.Executive_Manager_Name_Ar;
        Executive_Manager_Name_En = tbl_def_Company_y.Executive_Manager_Name_En;
        Executive_Manager_Phone = tbl_def_Company_y.Executive_Manager_Phone;
        Executive_Manager_Signature = tbl_def_Company_y.Executive_Manager_Signature;
        Accountancy_Manager_Name_Ar = tbl_def_Company_y.Accountancy_Manager_Name_Ar;
        Accountancy_Manager_Name_En = tbl_def_Company_y.Accountancy_Manager_Name_En;
        Accountancy_Manager_Phone = tbl_def_Company_y.Accountancy_Manager_Phone;
        Accountancy_Manager_Signature = tbl_def_Company_y.Accountancy_Manager_Signature;
        HR_Manager_Name_Ar = tbl_def_Company_y.HR_Manager_Name_Ar;
        HR_Manager_Name_En = tbl_def_Company_y.HR_Manager_Name_En;
        HR_Manager_Phone = tbl_def_Company_y.HR_Manager_Name_Phone;
        HR_Manager_Signature = tbl_def_Company_y.HR_Manager_Name_Signature;
        Sales_Manager_Name_Ar = tbl_def_Company_y.Sales_Manager_Name_Ar;
        Sales_Manager_Name_En = tbl_def_Company_y.Sales_Manager_Name_En;
        Sales_Manager_Phone = tbl_def_Company_y.Sales_Manager_Name_Phone;
        Sales_Manager_Signature = tbl_def_Company_y.Sales_Manager_Name_Signature;
    }
}

@*----------------------------------- Code  H -------------------------------------*@
@code{

    string Class_Name = "";
    string Tax_Registration_Number = "";
    string Notes_Ar = "";
    string Notes_En = "";

    string QueryStrign_H = "";
    private DialogAnimationSettings dialogAnnimation_H { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_H;
    public bool editVisible_Card_H_ { get; set; } = false;
    private void onCancelClick_H(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_H_ = false;
    }
    public void HandleSubmit_H()
    {
        //editVisible = false;
    }
    public void onEdit_CardH()
    {
        editVisible_Card_H_ = true;
    }
    public async Task UpdateEditModel_H(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //// verify data befoe Updating ------------------------------------------------
        if (Class_Name.Length >= 1)
        {

            tbl_def_Company_y.Class = Class_Name;
            tbl_def_Company_y.Tax_Registration_Number = Tax_Registration_Number;
            tbl_def_Company_y.Notes_Ar = Notes_Ar;
            tbl_def_Company_y.Notes_En = Notes_En;

            // Prevent Update Because This User Hasn't Permission
            if (Check_User_Super_Admin == "False")
            {
                await this.Toast_Permission_Failed.Show();
            }
            else
            {
                await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
                await this.Toast_Success.Show();
            }
        }
        else
        {
            //Show Erro Toast_Little_Length
            await this.Toast_Little_Length.Show();
        }
        editVisible_Card_H_ = false;
    }
    public void EditDialogOpen_H_()
    {
        Class_Name = tbl_def_Company_y.Class;
        Tax_Registration_Number = tbl_def_Company_y.Tax_Registration_Number;
        Notes_Ar = tbl_def_Company_y.Notes_Ar;
        Notes_En = tbl_def_Company_y.Notes_En;

    }
}

@*----------------------------------- Code  I     Logos And Banners  -------------------------------------*@
@code{

    string Logo_Color_Big = "";
    string Logo_Color_Small = "";
    string Logo_Print_Big = "";
    string Logo_Print_Small = "";
    string Banner_Big = "";
    string Banner_small = "";

    string Print_Technical = "";
    string Print_Financial = "";
    string Print_Managing = "";
    string Print_Inventory = "";
    string Print_Purchases = "";
    string Print_Sales = "";


    string QueryStrign_I = "";
    private DialogAnimationSettings dialogAnnimation_I { get; set; } = new DialogAnimationSettings { Effect = DialogEffect.Zoom };
    SfDialog EditDialogObj_Card_I;
    public bool editVisible_Card_I_ { get; set; } = false;
    private void onCancelClick_I(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        editVisible_Card_I_ = false;
    }
    public void HandleSubmit_I()
    {
        //editVisible = false;
    }
    public void onEdit_CardI()
    {
        editVisible_Card_I_ = true;
    }
    public async Task UpdateEditModel_I(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        tbl_def_Company_y.Logo_Color_Big = Logo_Color_Big;
        tbl_def_Company_y.Logo_Color_Small = Logo_Color_Small;
        tbl_def_Company_y.Logo_Print_Big = Logo_Print_Big;
        tbl_def_Company_y.Logo_Print_Small = Logo_Print_Small;
        tbl_def_Company_y.Banner_Big = Banner_Big;
        tbl_def_Company_y.Banner_small = Banner_small;

        //tbl_def_Company_y.Print_Technical = Print_Technical;
        //tbl_def_Company_y.Print_Financial = Print_Financial;
        //tbl_def_Company_y.Print_Managing = Print_Managing;
        //tbl_def_Company_y.Print_Inventory = Print_Inventory;
        //tbl_def_Company_y.Print_Purchases = Print_Purchases;
        //tbl_def_Company_y.Print_Sales = Print_Sales;


        // Prevent Update Because This User Hasn't Permission
        if (Check_User_Super_Admin == "False")
        {
            await this.Toast_Permission_Failed.Show();
        }
        else
        {
            await iTbl_def_Company_yService.Tbl_def_Company_yUpdate(tbl_def_Company_y);
            await this.Toast_Success.Show();
        }

        editVisible_Card_I_ = false;
    }
    public void EditDialogOpen_I_()
    {
        Logo_Color_Big = tbl_def_Company_y.Logo_Color_Big;
        Logo_Color_Small = tbl_def_Company_y.Logo_Color_Small;
        Logo_Print_Big = tbl_def_Company_y.Logo_Print_Big;
        Logo_Print_Small = tbl_def_Company_y.Logo_Print_Small;
        Banner_Big = tbl_def_Company_y.Banner_Big;
        Banner_small = tbl_def_Company_y.Banner_small;

        //Print_Technical = tbl_def_Company_y.Print_Technical;
        //Print_Financial = tbl_def_Company_y.Print_Financial;
        //Print_Managing = tbl_def_Company_y.Print_Managing;
        //Print_Inventory = tbl_def_Company_y.Print_Inventory;
        //Print_Purchases = tbl_def_Company_y.Print_Purchases;
        //Print_Sales = tbl_def_Company_y.Print_Sales;


    }
}

@*---------------------------------------------------------------------------------*@

@code {
    /// ***********************************************************************************************
    /// إعلان المتغيرات
    string language1 = "";
    //string Dir = "";
    string QueryString = "";
    string User_Name = "";

    Tbl_Log_Activities_y Tbl_Log_Activities_y = new Tbl_Log_Activities_y();
    /// ***********************************************************************************************

    /// ***********************************************************************************************
    /// تمت المراجعة جزئيا
    /// ***********************************************************************************************
    ///

    string Check_User_Super_Admin;
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Check Is Super Admin
        //string User_Name = await sessionStorage.GetItemAsync<string>("User_Name");
        //Check_User_Super_Admin = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadField?QueryString=" + "select* from Tbl_def_Users_y where User_Name = '" + User_Name + "'&Required_Field=IS_Super_User");
        //Check_User_Super_Admin = Check_User_Super_Admin.Replace("\"", "");
        /////////////////////////////////////////
        //--- Get User Data
        var user = (await AuthStat).User;
        User_Name = user.Identity.Name;
        /////////////////////////////////////////
        //Check login ///////////////////////////////////////////////////////
        //User_Name = await sessionStorage.GetItemAsync<string>("User_Name");
        Tbl_Log_Activities_y.Action = "فشل فتح موديول الاعدادات";
        Tbl_Log_Activities_y.Action_Code = "Invalid_User_001";
        Tbl_Log_Activities_y.Action_description = "محاولة فتح فاشلة لصفحة موديول الإعدادات بسبب عدم توفر معلومات عن المستخدم";
        Tbl_Log_Activities_y.Action_QueryString = "";
        Tbl_Log_Activities_y.Affected_tables = "";
        Tbl_Log_Activities_y.Device = "";
        Tbl_Log_Activities_y.HRDW = "";
        Tbl_Log_Activities_y.IP = "";
        Tbl_Log_Activities_y.Notes = "";
        Tbl_Log_Activities_y.Page_Name = "/menu";
        Tbl_Log_Activities_y.Page_Title = "";
        Tbl_Log_Activities_y.ProccessID = "";
        Tbl_Log_Activities_y.TimeStamp = DateTime.Now;
        Tbl_Log_Activities_y.User_Can_Navigate = false;
        Tbl_Log_Activities_y.User_Department = "";
        Tbl_Log_Activities_y.User_ID = "";
        Tbl_Log_Activities_y.User_Job = "";
        Tbl_Log_Activities_y.User_Name = User_Name;
        if (string.IsNullOrEmpty(User_Name))
        {
            await iTbl_Log_Activities_yService.Tbl_Log_Activities_yInsert(Tbl_Log_Activities_y);
            UriHelper.NavigateTo("/");
            return;
        }
        QueryString = "Select * from Tbl_def_Users_y where User_Name='" + User_Name + "'";
        //Language = icb_database_Service.ReadField(QueryString, "Language");
        language1 = "ar-EG";// await sessionStorage.GetItemAsync<string>("language");

        if (language1 == "ar-EG")
        {
            Tbl_Log_Activities_y.Action = "فتح موديول الإعدادات";
            Tbl_Log_Activities_y.Action_Code = "Open_Manu";
            Tbl_Log_Activities_y.Action_description = "فتح صفحة موديول الإعدادات ";

            await iTbl_Log_Activities_yService.Tbl_Log_Activities_yInsert(Tbl_Log_Activities_y);
            //await jsRuntime.InvokeAsync<string>("console.log", "عربي");
            languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("ar-EG"));
            //Dir = "rtl";
        }
        else
        {
            await iTbl_Log_Activities_yService.Tbl_Log_Activities_yInsert(Tbl_Log_Activities_y);
            language1 = "en-US";
            //await jsRuntime.InvokeAsync<string>("console.log", "Eglish");
            languageContainer.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
            //Dir = "ltr";
        }

        //string CompanyName = "xyz";
        ////CompanyName = icb_database_Service.ReadField("SELECT * FROM [AjaTech].[dbo].[Tbl_def_Company_Activities_x] where ID=2", "Activity_Title_Ar");
        ////await jsRuntime.InvokeAsync<string>("console.log", CompanyName);

    }

    IEnumerable<Tbl_def_Company_Braches_y> DataSource_BranchesGrid;
    IEnumerable<Tbl_def_Company_Departments_y> DataSource_DepartmentsGrid;
    //IEnumerable<Tbl_def_Licences> DataSource_LicencesGrid;




    Tbl_def_Company_y tbl_def_Company_y = new Tbl_def_Company_y();

    protected override void OnInitialized()
    {
        tbl_def_Company_y = iTbl_def_Company_yService.Tbl_def_Company_yList();
        DataSource_BranchesGrid = iTbl_def_Company_Braches_yService.Tbl_def_Company_Braches_yList();
        DataSource_DepartmentsGrid = iTbl_def_Company_Departments_yService.Tbl_def_Company_Departments_yList();
        //DataSource_LicencesGrid = iTbl_def_Licences.Tbl_def_Licences_List();
    }

    private List<VM_Def_Licences> DataSource_LicencesGrid = new List<VM_Def_Licences>();

    protected override async Task OnInitializedAsync()
    {
        // Get Api LicencesGrid
        DataSource_LicencesGrid = await httpClient.GetJsonAsync<List<VM_Def_Licences>>(Configuration.GetValue<string>("Api") + "/api/Licences_api");
    }
}

@*=========================================  Toast Start ========================================================*@

@*=========================================  Toast Permission ========================================================*@
<SfToast ID="Failed_Id_Permission" @ref="Toast_Permission_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Content_Permission_Failed"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@*========================================= /  Toast Permission ========================================================*@
@*=========================================  Toast Reload ========================================================*@
<SfToast ID="Failed_Id_Reload" @ref="Toast_Reload_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Failed_Reload"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@*========================================= /  Toast Reload ========================================================*@
@*=========================================  Toast Add ========================================================*@
<SfToast ID="Failed_Id_Add" @ref="Toast_Add_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Content_Add_Failed"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@*========================================= /  Toast Add ========================================================*@
@*=========================================  Toast  Delete ========================================================*@

<SfToast ID="Success_Id" @ref="Toast_Success" TimeOut="4000" CssClass="e-toast-success" Icon="e-success toast-icons" Title="@languageContainer.Keys["Toast_Title_Success"]" Content="@languageContainer.Keys["Toast_Content_Success"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
<SfToast ID="Failed_Id_Delete" @ref="Toast_Del_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Content_Delete_Failed"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@*========================================= / Toast  Delete ========================================================*@
@*=========================================  Toast Little Length ========================================================*@
<SfToast ID="Little_Length_Id" @ref="Toast_Little_Length" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Failed_Little_Letters_Length"]">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@*========================================= /  Toast Little Length ========================================================*@

@*=========================================   Toast  Code ========================================================*@
@code{
    SfToast Toast_Success;
    SfToast Toast_Add_Failed;
    SfToast Toast_Del_Failed;
    SfToast Toast_Permission_Failed;
    SfToast Toast_Little_Length;
    SfToast Toast_Reload_Failed;
}
@*========================================= /  Toast  Code ========================================================*@

@*=========================================  Toast End ========================================================*@
