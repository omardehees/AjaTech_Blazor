@page "/Employees"
@layout MainLayout_Settings

@using AjaTech_Blazor.Data.IServices;
@using AjaTech_Blazor.Data.Tables_Models;
@using System;
@using AjaTech_Blazor.Data.ViewModels;
@using System.Threading.Tasks;
@using Microsoft.Extensions.Configuration;


@inject ITbl_def_Company_Departments_yService  iTbl_def_Company_Departments_yService
@inject HttpClient httpClient
@inject ITbl_Log_Activities_yService iTbl_Log_Activities_yService
@inject NavigationManager UriHelper
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration
@*@inject Blazored.SessionStorage.ISessionStorageService sessionStorage*@


<div class="container card-container p-1">
    <div class="row">

        <SfTab ShowCloseButton="true">
            <TabItems>

                @*=========================================  Start  Jobs Tab   ========================================================*@

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@languageContainer.Keys["Jobs_Grid"]"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="tab-content">
                            @*=========================================  Start  Jobs     ========================================================*@
                            @*----------------------------------- Grid    Jobs   -----------------------------*@
                            <div class="col-lg-12 control-section">
                                <div class="content-wrapper">
                                    <div class="row">
                                        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#7575ff;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Jobs_Grid"]</div>
                                        <SfGrid ID="Grid" @ref="Grid1" DataSource="@DataSource_Jobs" Width="100%" cssclass="" AllowPaging="true" AllowResizing="true" AllowExcelExport="true" AllowRowDragAndDrop="true" Toolbar="@(new string[] { "Add", "Delete", "Edit", "Update", "Cancel" , "Print" , "ExcelExport", "Search"})">
                                            <GridEvents OnActionBegin="ActionBegin_Jobs" OnToolbarClick="ToolbarClick" TValue="VM_Def_Jobs_api"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams"></GridEditSettings>

                                            <GridColumns>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.ID) IsIdentity="true" HeaderText="ID" IsPrimaryKey="true" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Job_Title_Ar) HeaderText="@languageContainer.Keys["Job_Title_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Job_Title_En) HeaderText="@languageContainer.Keys["Job_Title_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Type_Ar) HeaderText="@languageContainer.Keys["Job_Type_Ar"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.type_En) HeaderText="@languageContainer.Keys["Job_Type_En"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Job_Description_Ar) HeaderText="@languageContainer.Keys["Job_Description_Ar"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Job_Description_En) HeaderText="@languageContainer.Keys["Job_Description_En"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Departmets_ID) HeaderText="@languageContainer.Keys["Job_Department"]" TextAlign="TextAlign.Center" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Departmets_ID" Value="@((context as VM_Def_Jobs_api).Departmets_ID)" Placeholder="@languageContainer.Keys["Job_Department"]" DataSource="@DataSource_Departments_Drop">
                                                            <DropDownListFieldSettings Text="@Departments_Language" Value="@Departments_Language"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Notes_Ar) HeaderText="@languageContainer.Keys["Employees_Note_Ar"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Notes_En) HeaderText="@languageContainer.Keys["Employees_Note_En"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Enabled) DefaultValue="1" EditType="EditType.BooleanEdit" DisplayAsCheckBox="true" HeaderText="@languageContainer.Keys["Def_Enabled"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Archived) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Archived"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Jobs_api.Deleted) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Deleted"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>
                            @*-----------------------------------  Code Jobs  -----------------------------*@
                            @code{
                                SfGrid<VM_Def_Jobs_api> Grid1;
                                public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
                                { if (args.Item.Id == "Grid_excelexport") { this.Grid1.ExcelExport(); } }

                                private object DialogParams = new
                                {
@@params = new DialogModel { MinHeight = "400px", Width = "450px" }
                            };

                            VM_Def_Jobs_api VM_Def_Jobs_api_Object = new VM_Def_Jobs_api();
                            VM_Def_Jobs_api VM_Def_Jobs_api_Object2 = new VM_Def_Jobs_api();

                            public async void ActionBegin_Jobs(ActionEventArgs<VM_Def_Jobs_api> args)
                            {
                                string Used_Jobs = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Def_Employees_api&Required_Field=Job");
                                string List_Job_Title_Ar = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Def_Jobs_api&Required_Field=Job_Title_Ar");
                                string List_Job_Title_En = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Def_Jobs_api&Required_Field=Job_Title_En");

                                // Delete Api Jobs

                                if (args.RequestType.ToString() == "Delete")
                                {
                                    if (Used_Jobs.IndexOf(args.Data.Job_Title_Ar) != -1)
                                    {
                                        await this.Toast_Del_Failed.Show();
                                    }
                                    else if (Used_Jobs.IndexOf(args.Data.Job_Title_En) != -1)
                                    {
                                        await this.Toast_Del_Failed.Show();
                                    }

                                    // Prevent Delete If ID = 0 (It's Means That Id Didn't take His Place In DataBase)
                                    else if (args.Data.ID == 0)
                                    {
                                        await this.Toast_Reload_Failed.Show();
                                    }
                                    else
                                    {
                                        await httpClient.DeleteAsync(Configuration.GetValue<string>("Api") + "/api/Jobs_api/" + args.Data.ID);
                                        await this.Toast_Success.Show();
                                    }
                                }

                                else if (args.RequestType.ToString() == "Save")
                                {
                                    if (args.Action == "add")
                                    // Post Api Jobs

                                    {
                                        VM_Def_Jobs_api_Object.Type_Ar = args.Data.Type_Ar;
                                        VM_Def_Jobs_api_Object.type_En = args.Data.type_En;
                                        VM_Def_Jobs_api_Object.Job_Title_Ar = args.Data.Job_Title_Ar;
                                        VM_Def_Jobs_api_Object.Job_Title_En = args.Data.Job_Title_En;
                                        VM_Def_Jobs_api_Object.Job_Description_Ar = args.Data.Job_Description_Ar;
                                        VM_Def_Jobs_api_Object.Job_Description_En = args.Data.Job_Description_En;
                                        VM_Def_Jobs_api_Object.Notes_Ar = args.Data.Notes_Ar;
                                        VM_Def_Jobs_api_Object.Notes_En = args.Data.Notes_En;
                                        VM_Def_Jobs_api_Object.Departmets_ID = args.Data.Departmets_ID;
                                        VM_Def_Jobs_api_Object.Enabled = args.Data.Enabled;
                                        VM_Def_Jobs_api_Object.Archived = args.Data.Archived;
                                        VM_Def_Jobs_api_Object.Deleted = args.Data.Deleted;

                                        if (List_Job_Title_Ar.IndexOf(args.Data.Job_Title_Ar) != -1)
                                        {
                                            await this.Toast_Add_Failed.Show();
                                        }
                                        else if (List_Job_Title_En.IndexOf(args.Data.Job_Title_En) != -1)
                                        {
                                            await this.Toast_Add_Failed.Show();
                                        }
                                        else
                                        {
                                            await httpClient.PostJsonAsync(Configuration.GetValue<string>("Api") + "/api/Jobs_api", VM_Def_Jobs_api_Object);
                                            await this.Toast_Success.Show();
                                        }
                                    }


                                    else
                                    // Put Api Jobs

                                    {

                                        VM_Def_Jobs_api_Object2.ID = args.Data.ID;
                                        VM_Def_Jobs_api_Object2.Type_Ar = args.Data.Type_Ar;
                                        VM_Def_Jobs_api_Object2.type_En = args.Data.type_En;
                                        VM_Def_Jobs_api_Object2.Job_Title_Ar = args.Data.Job_Title_Ar;
                                        VM_Def_Jobs_api_Object2.Job_Title_En = args.Data.Job_Title_En;
                                        VM_Def_Jobs_api_Object2.Job_Description_Ar = args.Data.Job_Description_Ar;
                                        VM_Def_Jobs_api_Object2.Job_Description_En = args.Data.Job_Description_En;
                                        VM_Def_Jobs_api_Object2.Notes_Ar = args.Data.Notes_Ar;
                                        VM_Def_Jobs_api_Object2.Notes_En = args.Data.Notes_En;
                                        VM_Def_Jobs_api_Object2.Departmets_ID = args.Data.Departmets_ID;
                                        VM_Def_Jobs_api_Object2.Enabled = args.Data.Enabled;
                                        VM_Def_Jobs_api_Object2.Archived = args.Data.Archived;
                                        VM_Def_Jobs_api_Object2.Deleted = args.Data.Deleted;


                                        await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Jobs_api/EditRow?id=" + args.Data.ID.ToString(), VM_Def_Jobs_api_Object2);
                                        await this.Toast_Success.Show();

                                    }
                                }
                            }


                            }
                        </div>
                    </ContentTemplate>
                </TabItem>

                @*=========================================  End  Jobs   Tab  ========================================================*@
                @*=========================================  Start  Employees _Small  Tab   ========================================================*@

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@languageContainer.Keys["Employees_Grid"]"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="tab-content">
                            @*----------------------------------- Grid    Employees _Small   -----------------------------*@
                            <div class="col-lg-12 control-section">
                                <div class="content-wrapper">
                                    <div class="row">
                                        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#7575ff;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Employees_Grid"]</div>
                                        <SfGrid ID="Grid" @ref="Grid2" DataSource="@DataSource_Employees" Width="100%" cssclass="" AllowExcelExport="true" AllowPaging="true" AllowResizing="true" AllowRowDragAndDrop="true" Toolbar="@(new string[] { "Add","Edit", "Update", "Cancel" , "Print" , "ExcelExport", "Search"  })">
                                            <GridEvents OnToolbarClick="ToolbarClick" OnActionBegin="Actionbegin_Employees_Small" TValue="VM_Def_Employees_api"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams3"></GridEditSettings>
                                            <GridColumns>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.ID) IsIdentity="true" HeaderText="ID" IsPrimaryKey="true" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Name_Ar) HeaderText="@languageContainer.Keys["Employees_Name_Ar"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Name_En) HeaderText="@languageContainer.Keys["Employees_Name_En"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Boss_Name) HeaderText="@languageContainer.Keys["Employees_Boss_Name"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.User_Name) HeaderText="@languageContainer.Keys["Employees_User_Name"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Password) HeaderText="@languageContainer.Keys["Employees_Password"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job) HeaderText="@languageContainer.Keys["Job"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Job" Placeholder="@languageContainer.Keys["Job"]" Value="@((context as VM_Def_Employees_api).Job)" DataSource="@DataSource_Jobs">
                                                            <DropDownListFieldSettings Text="Job_Title_Ar" Value="Job_Title_Ar"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Department) HeaderText="@languageContainer.Keys["Employees_Department"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Department" Placeholder="@languageContainer.Keys["Job_Department"]" Value="@((context as VM_Def_Employees_api).Department)" DataSource="@DataSource_Departments_Drop">
                                                            <DropDownListFieldSettings Text="@Departments_Language" Value="@Departments_Language"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.ID_Type) HeaderText="@languageContainer.Keys["Employees_ID_Type"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true })" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.ID_Number) HeaderText="@languageContainer.Keys["Employees_ID_Number"]" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Phones) HeaderText="@languageContainer.Keys["Phone"]" TextAlign="TextAlign.Center" ValidationRules="@(new { required = true, number = true })" Width="150"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>
                            @*-----------------------------------   Code Employees _Small  -----------------------------*@
                            @code{
                                SfGrid<VM_Def_Employees_api> Grid2;

                                private object DialogParams3 = new
                                {
@@params3 = new DialogModel { MinHeight = "400px", Width = "450px" }
                            };

                            VM_Def_Employees_api VM_Def_Employees_api_Small_Object1 = new VM_Def_Employees_api();
                            VM_Def_Employees_api VM_Def_Employees_api_Small_Object2 = new VM_Def_Employees_api();

                            public async Task Actionbegin_Employees_Small(ActionEventArgs<VM_Def_Employees_api> args)
                            {
                                // Delete Api Employees

                                if (args.RequestType.ToString() == "Delete")
                                {

                                    // Prevent Delete If ID = 0 (It's Means That Id Didn't take His Place In DataBase)
                                    if (args.Data.ID == 0)
                                    {
                                        await this.Toast_Reload_Failed.Show();
                                    }
                                    else
                                    {
                                        await httpClient.DeleteAsync(Configuration.GetValue<string>("Api") + "/api/Employees_api/" + args.Data.ID);
                                        await this.Toast_Success.Show();
                                    }
                                }

                                else if (args.RequestType.ToString() == "Save")
                                {
                                    if (args.Action == "add")
                                    {
                                        // Post Api Employees

                                        VM_Def_Employees_api_Small_Object1.Name_Ar = args.Data.Name_Ar;
                                        VM_Def_Employees_api_Small_Object1.Name_En = args.Data.Name_En;
                                        VM_Def_Employees_api_Small_Object1.Boss_Name = args.Data.Boss_Name;
                                        VM_Def_Employees_api_Small_Object1.User_Name = args.Data.User_Name;
                                        VM_Def_Employees_api_Small_Object1.Password = args.Data.Password;
                                        VM_Def_Employees_api_Small_Object1.Job = args.Data.Job;
                                        VM_Def_Employees_api_Small_Object1.Department = args.Data.Department;
                                        VM_Def_Employees_api_Small_Object1.ID_Type = args.Data.ID_Type;
                                        VM_Def_Employees_api_Small_Object1.ID_Number = args.Data.ID_Number;
                                        VM_Def_Employees_api_Small_Object1.Phones = args.Data.Phones;

                                        string Emp_ID_Number = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Def_Employees_api&Required_Field=ID_Number");
                                        if (Emp_ID_Number.IndexOf(args.Data.ID_Number) != -1)
                                        {
                                            await this.Toast_Add_Failed.Show();
                                        }
                                        else
                                        {
                                            await httpClient.PostJsonAsync(Configuration.GetValue<string>("Api") + "/api/Employees_api", VM_Def_Employees_api_Small_Object1);
                                            await this.Toast_Success.Show();
                                        }

                                    }
                                    else
                                    {
                                        // Put Api Employees

                                        VM_Def_Employees_api_Small_Object2.ID = args.Data.ID;
                                        VM_Def_Employees_api_Small_Object2.Name_Ar = args.Data.Name_Ar;
                                        VM_Def_Employees_api_Small_Object2.Name_En = args.Data.Name_En;
                                        VM_Def_Employees_api_Small_Object2.Boss_Name = args.Data.Boss_Name;
                                        VM_Def_Employees_api_Small_Object2.User_Name = args.Data.User_Name;
                                        VM_Def_Employees_api_Small_Object2.Password = args.Data.Password;
                                        VM_Def_Employees_api_Small_Object2.Job = args.Data.Job;
                                        VM_Def_Employees_api_Small_Object2.Department = args.Data.Department;
                                        VM_Def_Employees_api_Small_Object2.ID_Type = args.Data.ID_Type;
                                        VM_Def_Employees_api_Small_Object2.ID_Number = args.Data.ID_Number;
                                        VM_Def_Employees_api_Small_Object2.Phones = args.Data.Phones;


                                        await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Employees_api?id=" + args.Data.ID.ToString(), VM_Def_Employees_api_Small_Object2);
                                        await this.Toast_Success.Show();

                                    }
                                }

                            }


                            }


                        </div>
                    </ContentTemplate>
                </TabItem>
                @*=========================================  End  Employees _Small Tab    ========================================================*@

                @*=========================================  Start  Employees Details  Tab   ========================================================*@

                <TabItem>
                    <ChildContent>
                        <TabHeader Text="@languageContainer.Keys["Employees_Details_Grid"]"></TabHeader>
                    </ChildContent>
                    <ContentTemplate>
                        <div class="tab-content">
                            @*----------------------------------- Grid    Employees Details   -----------------------------*@
                            <div class="col-lg-12 control-section">
                                <div class="content-wrapper">
                                    <div class="row">
                                        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#7575ff;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["Employees_Details_Grid"]</div>
                                        <SfGrid ID="Grid" @ref="Grid3" DataSource="@DataSource_Employees" Width="100%" AllowFiltering="true" AllowExcelExport="true" AllowPaging="true" AllowResizing="true" AllowRowDragAndDrop="true" Toolbar="@(new string[] { "Add", "Delete", "Edit", "Update", "Cancel" , "Print" , "ExcelExport", "Search"  })">
                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                                            <GridEvents OnToolbarClick="ToolbarClick" OnActionBegin="Actionbegin_Employees" TValue="VM_Def_Employees_api"></GridEvents>
                                            <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true" ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog" Dialog="DialogParams2"></GridEditSettings>
                                            <GridColumns>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.ID) IsIdentity="true" HeaderText="ID" IsPrimaryKey="true" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Parent_ID) HeaderText="@languageContainer.Keys["Employees_Parent_ID"]" ValidationRules="@(new { number = true })" TextAlign="TextAlign.Center" Width="100"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Name_Ar) HeaderText="@languageContainer.Keys["Employees_Name_Ar"]" ValidationRules="@(new { required = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job) HeaderText="@languageContainer.Keys["Job"]" TextAlign="TextAlign.Center" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Job" Placeholder="@languageContainer.Keys["Job"]" Value="@((context as VM_Def_Employees_api).Job)" DataSource="@DataSource_Jobs">
                                                            <DropDownListFieldSettings Text="Job_Title_Ar" Value="Job_Title_Ar"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Name_En) HeaderText="@languageContainer.Keys["Employees_Name_En"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Tree_Code) HeaderText="@languageContainer.Keys["Employees_Tree_Code"]" ValidationRules="@(new { number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Boss_Name) HeaderText="@languageContainer.Keys["Employees_Boss_Name"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Boss_Code) HeaderText="@languageContainer.Keys["Employees_Boss_Code"]" ValidationRules="@(new { number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Peer_Name) HeaderText="@languageContainer.Keys["Employees_Peer_Name"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Peer_Code) HeaderText="@languageContainer.Keys["Employees_Peer_Code"]" ValidationRules="@(new { number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Alias) HeaderText="@languageContainer.Keys["Employees_Alias"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.User_Name) HeaderText="@languageContainer.Keys["Employees_User_Name"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Password) HeaderText="@languageContainer.Keys["Employees_Password"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Is_Super_Admin) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Employees_Is_Super_Admin"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Sex) HeaderText="@languageContainer.Keys["Sex"]" TextAlign="TextAlign.Center" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Sex" Placeholder="@languageContainer.Keys["Sex"]" Value="@((context as VM_Def_Employees_api).Sex)" DataSource="Datasource_Sex">
                                                            <DropDownListFieldSettings Text="sex" Value="sex"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job_Description) HeaderText="@languageContainer.Keys["Job_Description"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Department) HeaderText="@languageContainer.Keys["Employees_Department"]" TextAlign="TextAlign.Center" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Department" Placeholder="@languageContainer.Keys["Employees_Department"]" Value="@((context as VM_Def_Employees_api).Department)" DataSource="@DataSource_Departments_Drop">
                                                            <DropDownListFieldSettings Text="@Departments_Language" Value="@Departments_Language"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Branch) HeaderText="@languageContainer.Keys["Employees_Branch"]" TextAlign="TextAlign.Center" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Branch" Placeholder="@languageContainer.Keys["Employees_Branch"]" Value="@((context as VM_Def_Employees_api).Branch)" DataSource="@DataSource_Branches_Drop">
                                                            <DropDownListFieldSettings Text="@Branches_Language" Value="@Branches_Language"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job_Number) HeaderText="@languageContainer.Keys["Job_Number"]" ValidationRules="@(new { number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Social_Status) HeaderText="@languageContainer.Keys["Social_Status"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Image_Path) HeaderText="@languageContainer.Keys["Employees_Image_Path"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Evaluation) EditType="EditType.NumericEdit" HeaderText="@languageContainer.Keys["Employees_Evaluation"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Evaluation_Icon_Path) HeaderText="@languageContainer.Keys["Employees_Evaluation_Icon_Path"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.BirthDate) EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" HeaderText="@languageContainer.Keys["Employees_BirthDate"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Religon) HeaderText="@languageContainer.Keys["Employees_Religon"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Language) HeaderText="@languageContainer.Keys["Language"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.ID_Type) HeaderText="@languageContainer.Keys["Employees_ID_Type"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.ID_Number) HeaderText="@languageContainer.Keys["Employees_ID_Number"]" ValidationRules="@(new { required = true, number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Country) HeaderText="@languageContainer.Keys["Employees_Country"]" TextAlign="TextAlign.Center" Width="150">
                                                    <EditTemplate>
                                                        <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" ID="Country" Placeholder="@languageContainer.Keys["Employees_Country"]" Value="@((context as VM_Def_Employees_api).Country)" DataSource="@DataSource_Countries">
                                                            <DropDownListFieldSettings Text="Country_Title_En" Value="Country_Title_En"></DropDownListFieldSettings>
                                                        </SfDropDownList>
                                                    </EditTemplate>
                                                </GridColumn>
                                                @*<GridColumn Field=@nameof(VM_Def_Employees_api.City) HeaderText="@languageContainer.Keys["Employees_City"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>*@
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Address) HeaderText="@languageContainer.Keys["Employees_Address"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.EMail) HeaderText="@languageContainer.Keys["EMail"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Phones) HeaderText="@languageContainer.Keys["Phone"]" ValidationRules="@(new { number = true })" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job_Address) HeaderText="@languageContainer.Keys["Job_Address"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job_From) EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" HeaderText="@languageContainer.Keys["Job_From"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Job_Sallary) EditType="EditType.NumericEdit" HeaderText="@languageContainer.Keys["Job_Sallary"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Notes) HeaderText="@languageContainer.Keys["Def_Notes"]" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Enabled) DefaultValue="1" EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Enabled"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Archived) EditType="EditType.BooleanEdit" HeaderText="@languageContainer.Keys["Def_Archived"]" DisplayAsCheckBox="true" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                                <GridColumn Field=@nameof(VM_Def_Employees_api.Deleted) HeaderText="@languageContainer.Keys["Def_Deleted"]" DisplayAsCheckBox="true" EditType="EditType.BooleanEdit" TextAlign="TextAlign.Center" Width="150"></GridColumn>
                                            </GridColumns>
                                        </SfGrid>
                                    </div>
                                </div>
                            </div>



                            @*-----------------------------------   Code Employees Details  -----------------------------*@

                            @code{

                                SfGrid<VM_Def_Employees_api> Grid3;

                                public class SexClass
                                {
                                    public string sex { get; set; }
                                }
                                public List<SexClass> Datasource_Sex = new List<SexClass>
                                                                                                                                {
                                    new SexClass{ sex = "Male" },
                                    new SexClass{ sex = "Female" },
                                };

                                private object DialogParams2 = new
                                {
@@params2 = new DialogModel { MinHeight = "400px", Width = "450px" }
                            };

                            VM_Def_Employees_api VM_Def_Employees_api_Object1 = new VM_Def_Employees_api();
                            VM_Def_Employees_api VM_Def_Employees_api_Object2 = new VM_Def_Employees_api();

                            public async Task Actionbegin_Employees(ActionEventArgs<VM_Def_Employees_api> args)
                            {
                                // Delete Api Employees

                                if (args.RequestType.ToString() == "Delete")
                                {

                                    // Prevent Delete If ID = 0 (It's Means That Id Didn't take His Place In DataBase)
                                    if (args.Data.ID == 0)
                                    {
                                        await this.Toast_Reload_Failed.Show();
                                    }
                                    else
                                    {
                                        await httpClient.DeleteAsync(Configuration.GetValue<string>("Api") + "/api/Employees_api/" + args.Data.ID);
                                        await this.Toast_Success.Show();
                                    }
                                }
                                // Add An Api Employees

                                else if (args.RequestType.ToString() == "Save")
                                {
                                    if (args.Action == "add")
                                    {
                                        VM_Def_Employees_api_Object1.Parent_ID = args.Data.Parent_ID;
                                        VM_Def_Employees_api_Object1.Name_Ar = args.Data.Name_Ar;
                                        VM_Def_Employees_api_Object1.Name_En = args.Data.Name_En;
                                        VM_Def_Employees_api_Object1.Tree_Code = args.Data.Tree_Code;
                                        VM_Def_Employees_api_Object1.Boss_Name = args.Data.Boss_Name;
                                        VM_Def_Employees_api_Object1.Boss_Code = args.Data.Boss_Code;
                                        VM_Def_Employees_api_Object1.Peer_Name = args.Data.Peer_Name;
                                        VM_Def_Employees_api_Object1.Peer_Code = args.Data.Peer_Code;
                                        VM_Def_Employees_api_Object1.Alias = args.Data.Alias;
                                        VM_Def_Employees_api_Object1.Sex = args.Data.Sex;
                                        VM_Def_Employees_api_Object1.User_Name = args.Data.User_Name;
                                        VM_Def_Employees_api_Object1.Password = args.Data.Password;
                                        VM_Def_Employees_api_Object1.Is_Super_Admin = args.Data.Is_Super_Admin;
                                        VM_Def_Employees_api_Object1.Job = args.Data.Job;
                                        VM_Def_Employees_api_Object1.Job_Description = args.Data.Job_Description;
                                        VM_Def_Employees_api_Object1.Department = args.Data.Department;
                                        VM_Def_Employees_api_Object1.Branch = args.Data.Branch;
                                        VM_Def_Employees_api_Object1.Job_Number = args.Data.Job_Number;
                                        VM_Def_Employees_api_Object1.Social_Status = args.Data.Social_Status;
                                        VM_Def_Employees_api_Object1.Image_Path = args.Data.Image_Path;
                                        VM_Def_Employees_api_Object1.Evaluation = args.Data.Evaluation;
                                        VM_Def_Employees_api_Object1.Evaluation_Icon_Path = args.Data.Evaluation_Icon_Path;
                                        VM_Def_Employees_api_Object1.BirthDate = args.Data.BirthDate;
                                        VM_Def_Employees_api_Object1.Religon = args.Data.Religon;
                                        VM_Def_Employees_api_Object1.Language = args.Data.Language;
                                        VM_Def_Employees_api_Object1.ID_Type = args.Data.ID_Type;
                                        VM_Def_Employees_api_Object1.ID_Number = args.Data.ID_Number;
                                        VM_Def_Employees_api_Object1.Country = args.Data.Country;
                                        //VM_Def_Employees_api_Object1.City = args.Data.City;
                                        VM_Def_Employees_api_Object1.Address = args.Data.Address;
                                        VM_Def_Employees_api_Object1.EMail = args.Data.EMail;
                                        VM_Def_Employees_api_Object1.Phones = args.Data.Phones;
                                        VM_Def_Employees_api_Object1.Job_Address = args.Data.Job_Address;
                                        VM_Def_Employees_api_Object1.Job_From = args.Data.Job_From;
                                        VM_Def_Employees_api_Object1.Job_Sallary = args.Data.Job_Sallary;
                                        VM_Def_Employees_api_Object1.Notes = args.Data.Notes;
                                        VM_Def_Employees_api_Object1.Enabled = args.Data.Enabled;
                                        VM_Def_Employees_api_Object1.Archived = args.Data.Archived;
                                        VM_Def_Employees_api_Object1.Deleted = args.Data.Deleted;

                                        string Emp_ID_Number = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Def_Employees_api&Required_Field=ID_Number");
                                        if (Emp_ID_Number.IndexOf(args.Data.ID_Number) != -1)
                                        {
                                            await this.Toast_Add_Failed.Show();
                                        }
                                        else
                                        {
                                            await httpClient.PostJsonAsync(Configuration.GetValue<string>("Api") + "/api/Employees_api", VM_Def_Employees_api_Object1);
                                            await this.Toast_Success.Show();
                                        }

                                    }
                                    else
                                    {

                                        // Put Api Employees

                                        VM_Def_Employees_api_Object2.ID = args.Data.ID;
                                        VM_Def_Employees_api_Object2.Parent_ID = args.Data.Parent_ID;
                                        VM_Def_Employees_api_Object2.Name_Ar = args.Data.Name_Ar;
                                        VM_Def_Employees_api_Object2.Name_En = args.Data.Name_En;
                                        VM_Def_Employees_api_Object2.Tree_Code = args.Data.Tree_Code;
                                        VM_Def_Employees_api_Object2.Boss_Name = args.Data.Boss_Name;
                                        VM_Def_Employees_api_Object2.Boss_Code = args.Data.Boss_Code;
                                        VM_Def_Employees_api_Object2.Peer_Name = args.Data.Peer_Name;
                                        VM_Def_Employees_api_Object2.Peer_Code = args.Data.Peer_Code;
                                        VM_Def_Employees_api_Object2.Alias = args.Data.Alias;
                                        VM_Def_Employees_api_Object2.Sex = args.Data.Sex;
                                        VM_Def_Employees_api_Object2.User_Name = args.Data.User_Name;
                                        VM_Def_Employees_api_Object2.Password = args.Data.Password;
                                        VM_Def_Employees_api_Object2.Is_Super_Admin = args.Data.Is_Super_Admin;
                                        VM_Def_Employees_api_Object2.Job = args.Data.Job;
                                        VM_Def_Employees_api_Object2.Job_Description = args.Data.Job_Description;
                                        VM_Def_Employees_api_Object2.Department = args.Data.Department;
                                        VM_Def_Employees_api_Object2.Branch = args.Data.Branch;
                                        VM_Def_Employees_api_Object2.Job_Number = args.Data.Job_Number;
                                        VM_Def_Employees_api_Object2.Social_Status = args.Data.Social_Status;
                                        VM_Def_Employees_api_Object2.Image_Path = args.Data.Image_Path;
                                        VM_Def_Employees_api_Object2.Evaluation = args.Data.Evaluation;
                                        VM_Def_Employees_api_Object2.Evaluation_Icon_Path = args.Data.Evaluation_Icon_Path;
                                        VM_Def_Employees_api_Object2.BirthDate = args.Data.BirthDate;
                                        VM_Def_Employees_api_Object2.Religon = args.Data.Religon;
                                        VM_Def_Employees_api_Object2.Language = args.Data.Language;
                                        VM_Def_Employees_api_Object2.ID_Type = args.Data.ID_Type;
                                        VM_Def_Employees_api_Object2.ID_Number = args.Data.ID_Number;
                                        VM_Def_Employees_api_Object2.Country = args.Data.Country;
                                        //VM_Def_Employees_api_Object2.City = args.Data.City;
                                        VM_Def_Employees_api_Object2.Address = args.Data.Address;
                                        VM_Def_Employees_api_Object2.EMail = args.Data.EMail;
                                        VM_Def_Employees_api_Object2.Phones = args.Data.Phones;
                                        VM_Def_Employees_api_Object2.Job_Address = args.Data.Job_Address;
                                        VM_Def_Employees_api_Object2.Job_From = args.Data.Job_From;
                                        VM_Def_Employees_api_Object2.Job_Sallary = args.Data.Job_Sallary;
                                        VM_Def_Employees_api_Object2.Notes = args.Data.Notes;
                                        VM_Def_Employees_api_Object2.Enabled = args.Data.Enabled;
                                        VM_Def_Employees_api_Object2.Archived = args.Data.Archived;
                                        VM_Def_Employees_api_Object2.Deleted = args.Data.Deleted;

                                        await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Employees_api?id=" + args.Data.ID.ToString(), VM_Def_Employees_api_Object2);
                                        await this.Toast_Success.Show();

                                    }
                                }
                            }
                            }

                        </div>
                    </ContentTemplate>
                </TabItem>
                @*=========================================  End  Employees Details Tab    ========================================================*@

            </TabItems>
        </SfTab>
        @*=========================================  Toast Permission ========================================================*@
        <SfToast ID="Failed_Id_Permission" @ref="Toast_Permission_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Content_Permission_Failed"]">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        @*========================================= /  Toast Permission ========================================================*@
        @*=========================================  Toast Reload ========================================================*@
        <SfToast ID="Failed_Id_Reload" @ref="Toast_Reload_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Failed_Reload"]">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        @*========================================= /  Toast Reload ========================================================*@
        @*=========================================  Toast Add ========================================================*@
        <SfToast ID="Failed_Id_Add" @ref="Toast_Add_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Content_Add_Failed"]">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        @*========================================= /  Toast Add ========================================================*@
        @*=========================================  Toast  Delete ========================================================*@

        <SfToast ID="Success_Id" @ref="Toast_Success" TimeOut="4000" CssClass="e-toast-success" Icon="e-success toast-icons" Title="@languageContainer.Keys["Toast_Title_Success"]" Content="@languageContainer.Keys["Toast_Content_Success"]">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        <SfToast ID="Failed_Id_Delete" @ref="Toast_Del_Failed" TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger" Title="@languageContainer.Keys["Toast_Title_Failed"]" Content="@languageContainer.Keys["Toast_Content_Delete_Failed"]">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        @*========================================= / Toast  Delete ========================================================*@
    </div>
</div>
@code{
    SfToast Toast_Success;
    SfToast Toast_Add_Failed;
    SfToast Toast_Del_Failed;
    SfToast Toast_Permission_Failed;
    SfToast Toast_Reload_Failed;

    string Departments_Language = "", User_Name;
    string Branches_Language = "";

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Get Permissions
        //Permissions Permissions_Obj = new Permissions();
        //Permissions_Obj = await sessionStorage.GetItemAsync<Permissions>("Permissions");
        //await jsRuntime.InvokeAsync<string>("console.log", "user >> " + Permissions_Obj.UserName);
        //await jsRuntime.InvokeAsync<string>("console.log", "Password >> " + Permissions_Obj.Password);
        //await jsRuntime.InvokeAsync<string>("console.log", "Language Direction >> " + Permissions_Obj.Language);



        /////////////////////////////////////////
        //-- Get User Data
        var user = (await AuthStat).User;
        User_Name = user.Identity.Name;
        /////////////////////////////////////////


        Departments_Language = "Department_Title_Ar";
        Branches_Language = "Branch_Title_Ar";



    }
    string Get_Countries = "";
    //object DataSource_Countries_Drop;
    //object DataSource_Departments_Drop;
    //object DataSource_Branches_Drop;
    private List<VM_Def_Jobs_api> DataSource_Jobs = new List<VM_Def_Jobs_api>();
    private List<VM_Def_Employees_api> DataSource_Employees = new List<VM_Def_Employees_api>();
    private List<VM_Def_Departments_api> DataSource_Departments_Drop = new List<VM_Def_Departments_api>();
    private List<VM_Def_Branches_api> DataSource_Branches_Drop = new List<VM_Def_Branches_api>();
    private List<VM_Def_Countries> DataSource_Countries = new List<VM_Def_Countries>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get Api Jobs

            DataSource_Jobs = await httpClient.GetJsonAsync<List<VM_Def_Jobs_api>>(Configuration.GetValue<string>("Api") + "/api/Jobs_api");
            //DataSource_Jobs = await httpClient.GetJsonAsync<List<VM_Def_Jobs_api>>("http://198.38.94.29:99/api/Jobs_api");



            // Get Api Employees
            DataSource_Employees = await httpClient.GetJsonAsync<List<VM_Def_Employees_api>>(Configuration.GetValue<string>("Api") + "/api/Employees_api");

            ////Get Countries
            DataSource_Countries = await httpClient.GetJsonAsync<List<VM_Def_Countries>>(Configuration.GetValue<string>("Api") + "/api/Countries_api");
            //Get_Countries = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Countries_x&Required_Field=Country_Title_En");
            //DataSource_Countries_Drop = JsonConvert.DeserializeObject<IEnumerable<string>>(Get_Countries);

            // Get Api Departments
            //string Get_Departments = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Company_Departments_y&Required_Field=Department_Title_Ar");
            //DataSource_Departments_Drop = JsonConvert.DeserializeObject<IEnumerable<string>>(Get_Departments);
            DataSource_Departments_Drop = await httpClient.GetJsonAsync<List<VM_Def_Departments_api>>(Configuration.GetValue<string>("Api") + "/api/Departments_api");

            // Get Api Branches
            //string Get_Branches = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select* from Tbl_def_Company_Braches_y&Required_Field=Branch_Title_Ar");
            //DataSource_Branches_Drop = JsonConvert.DeserializeObject<IEnumerable<string>>(Get_Branches);
            DataSource_Branches_Drop = await httpClient.GetJsonAsync<List<VM_Def_Branches_api>>(Configuration.GetValue<string>("Api") + "/api/Branches_api");


            //string _ReadField = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadField?QueryString=" + "select* from Def_Employees_api&Required_Field=Name_Ar");
            //string _ReadColumn = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString="+ "select* from Def_Employees_api&Required_Field=Name_Ar");

        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            //await jsRuntime.InvokeAsync<string>("console.log", "Exception >> " + ex.Message);
        }
    }
}
