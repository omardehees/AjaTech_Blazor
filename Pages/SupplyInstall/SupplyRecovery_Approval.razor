@page "/SupplyRecovery_Approval"
@layout MainLayout_SupplyInstall

@using AjaTech_Blazor.Data.ViewModels;
@using System.Diagnostics;
@using Microsoft.Extensions.Configuration;

@inject HttpClient httpClient
@inject NavigationManager UriHelper
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration
@*@inject Blazored.SessionStorage.ISessionStorageService sessionStorage*@
@*---------------------------------------------------------------------------------------------------------------------------*@
@*--------------------------------------------------  Page Container --------------------------------------------------*@
<div class="container card-container">
    <div class="row">

        @*---------------------------------------------------------------------------------------------------------------------------*@
        @*--------------------------------------------------  Page Header --------------------------------------------------*@
        <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#868218;color:white;margin-top:20px;font-size:x-large;border-radius:5px">@languageContainer.Keys["EditApproval_SupplyRecovery"]</div>

        @*---------------------------------------------------------------------------------------------------------------------------*@
        @*=========================================  Content Page   ========================================================*@

        @*----------------------------------------------  اذونات الصرف والإاسترجاع    ----------------------------------- -----------------*@

        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <div class="col-lg-12 text-center font-weight-bold" style="border:gray 1px solid;background-color:#1b809e;margin-top:20px;font-size:x-large;border-radius:5px;color:white">@languageContainer.Keys["Supplyin_And_Recovery_Orders"]</div>
                    <SfGrid @ref="grdOrders" AllowSelection="true"
                            EnableRtl="true" DataSource="DataSource_Orders"
                            AllowResizing="true" Width="100%" AllowPaging="true"
                            Toolbar="@(new string[] { "Search", "Edit" , "Delete" })">
                        <GridEvents RowSelected="RowSelect_Order"
                                    OnActionBegin="ActionBegin_Orders"
                                    QueryCellInfo="CellColor_Orders"
                                    TValue="VM_SupplyInstall_Items_Transfere"></GridEvents>
                        <GridEditSettings AllowAdding="true" AllowEditOnDblClick="true"
                                          ShowDeleteConfirmDialog="true" ShowConfirmDialog="true" AllowEditing="true" AllowDeleting="true" Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog"></GridEditSettings>
                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row"></GridSelectionSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.ID) Visible="false" IsPrimaryKey="true" IsIdentity="true" DefaultValue="1" HeaderText="@languageContainer.Keys["ID"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.HardCopyCode) AllowEditing="false" HeaderText="@languageContainer.Keys["SupplyingOrder_Code"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.The_Date) AllowEditing="false" EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" HeaderText="@languageContainer.Keys["Date"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Customer) HeaderText="@languageContainer.Keys["Customer_Name"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Customer" Placeholder="@languageContainer.Keys["Customer_Name"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Customer)" DataSource="@DataSource_Customers">
                                        <DropDownListFieldSettings Text="Customer" Value="Customer"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Contract_Type) HeaderText="@languageContainer.Keys["Contract_Type"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Contract_Type" Placeholder="@languageContainer.Keys["Contract_Type"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Contract_Type)" DataSource="@DataSource_Contract_Type">
                                        <DropDownListFieldSettings Text="Contract_Type" Value="Contract_Type"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Contract_HardCopyCode) HeaderText="@languageContainer.Keys["Contract_Code"]" ValidationRules="@(new { number = true})" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Contract_HardCopyCode" Placeholder="@languageContainer.Keys["Contract_Code"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Contract_HardCopyCode)" DataSource="@DataSource_Contract_HardCopyCode">
                                        <DropDownListFieldSettings Text="Contract_HardCopyCode" Value="Contract_HardCopyCode"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Job_Type) HeaderText="@languageContainer.Keys["OrderType"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Job_Type" Placeholder="@languageContainer.Keys["OrderType"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Job_Type)" DataSource="@DataSource_OrderType">
                                        <DropDownListFieldSettings Text="Job_Type" Value="Job_Type"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Inventory) HeaderText="@languageContainer.Keys["Inventory"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Inventory" Placeholder="@languageContainer.Keys["Inventory"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Inventory)" DataSource="@DataSource_Inventory">
                                        <DropDownListFieldSettings Text="Inventory" Value="Inventory"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Inventory_Employee) HeaderText="@languageContainer.Keys["Inventory_Employee"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Inventory_Employee" Placeholder="@languageContainer.Keys["Inventory_Employee"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Inventory_Employee)" DataSource="@DataSource_Employees">
                                        <DropDownListFieldSettings Text="Title" Value="Title"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Boss_Employee) HeaderText="@languageContainer.Keys["Contract_Employee"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Boss_Employee" Placeholder="@languageContainer.Keys["Contract_Employee"]" Value="@((context as VM_SupplyInstall_Items_Transfere).Boss_Employee)" DataSource="@DataSource_Employees">
                                        <DropDownListFieldSettings Text="Title" Value="Title"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Stage) HeaderText="@languageContainer.Keys["Stage"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Issued_By) AllowEditing="false" HeaderText="@languageContainer.Keys["Issuance_By"]" TextAlign="TextAlign.Center" Width="110"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Approved_By) AllowEditing="false" HeaderText="@languageContainer.Keys["Approval"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere.Approved_At) AllowEditing="false" EditType="EditType.DatePickerEdit" Format="d/M/yyyy" Type="ColumnType.Date" HeaderText="@languageContainer.Keys["Approval_Date"]" TextAlign="TextAlign.Center" Width="120"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>

        @*--------------------------------------------------  Buttons  ---------------------------------------------------*@
        <div class="col-lg-12 control-section form-group m-3">
            <div class="row">
                <div class="col-lg-2"></div>
                @* زر طباعة العرض *@
                @*<SfButton  CssClass="col-lg-3 e-btn font-weight-bold e-normal e-primary" IconCss="e-icons e-print-icon">. @languageContainer.Keys["Print"]</SfButton>*@
                <div class="col-lg-2"></div>
                @* زر اعتماد العرض *@
                <SfButton @onclick="btn_Success_Approval" @ref="refbtn_Success_Approval" CssClass="col-lg-4 e-btn e-normal e-success form-control font-weight-bold" type="button">@languageContainer.Keys["Approval"]</SfButton>
                <div class="col-lg-4"></div>

            </div>
        </div>

        @*-----------------------------------------------------------------------------------------------------*@
        @*-------------------------------------------------- شبكة تفاصيل الاذن --------------------------------- -----------------*@

        <div class="col-lg-12 control-section">
            <div class="content-wrapper">
                <div class="row">
                    <div class="col-lg-12 text-center font-weight-bold" style="border:#808080 1px solid;background-color:#1b809e;margin-top:20px;font-size:x-large;border-radius:5px;color:white">@languageContainer.Keys["order_Details"]</div>
                    <SfGrid @ref="grdOrders_Details" EnableRtl="true" DataSource="DataSource_Orders_Datails"
                            Width="100%" AllowPaging="true"
                            Toolbar="@(new string[] { "Search","Add", "Edit" , "Delete" })">
                        <GridEvents OnActionBegin="ActionBegin_Orders_Details" TValue="VM_SupplyInstall_Items_Transfere_Details"></GridEvents>
                        <GridEditSettings ShowDeleteConfirmDialog="true"
                                          ShowConfirmDialog="true"
                                          AllowDeleting="true"
                                          AllowEditing="true"
                                          AllowAdding="true"
                                          AllowEditOnDblClick="true"
                                          Mode="@Syncfusion.Blazor.Grids.EditMode.Dialog"></GridEditSettings>
                        <GridSelectionSettings PersistSelection="true"></GridSelectionSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere_Details.ID) Visible="false" IsPrimaryKey="true" IsIdentity="true" DefaultValue="1" HeaderText="@languageContainer.Keys["ID"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere_Details.HardCopyCode) AllowEditing="false" HeaderText="@languageContainer.Keys["SupplyingOrder_Code"]" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere_Details.Item) HeaderText="@languageContainer.Keys["Item"]" TextAlign="TextAlign.Center">
                                <EditTemplate>
                                    <SfDropDownList ShowClearButton="true" FloatLabelType="@FloatLabelType.Always" AllowFiltering="true" ID="Item" Placeholder="@languageContainer.Keys["Item"]" Value="@((context as VM_SupplyInstall_Items_Transfere_Details).Item)" DataSource="@DataSource_Items">
                                        <DropDownListFieldSettings Text="Item_Title_Ar" Value="Item_Title_Ar"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                </EditTemplate>
                            </GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere_Details.Quantity) HeaderText="@languageContainer.Keys["Quantity"]" ValidationRules="@(new { number = true})" TextAlign="TextAlign.Center"></GridColumn>
                            <GridColumn Field=@nameof(VM_SupplyInstall_Items_Transfere_Details.Statment) HeaderText="@languageContainer.Keys["Statement"]" TextAlign="TextAlign.Center"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>

        @*-----------------------------------------------------------------------------------------------------*@
        @*========================================= / Content Page   ========================================================*@

        @*========================================= Toast Custom   Code ============================================================*@
        <SfToast ID="Failed_Id_Custom" @ref="Toast_Custom_Failed"
                 TimeOut="5000" Icon="e-error toast-icons" CssClass="e-toast-danger"
                 Title="@languageContainer.Keys["Toast_Title_Failed"]"
                 Content="@ToastContent">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        @*========================================= / Toast Custom   Code =============================================================*@

        @*========================================= / Toast  Success =================================================================*@

        <SfToast ID="Success_Id" @ref="Toast_Success" TimeOut="4000" CssClass="e-toast-success"
                 Icon="e-success toast-icons"
                 Title="@languageContainer.Keys["Toast_Title_Success"]"
                 Content="@languageContainer.Keys["Toast_Content_Success"]">
            <ToastPosition X="Right" Y="Bottom"></ToastPosition>
        </SfToast>
        @*========================================= / Toast  Success ==================================================================*@

    </div>
</div>

@*-----------------------------------------------------------------------------------------------------*@
@*--------------------------------------------  Code --------------------------------------------------*@
@*-----------------------------------------------------------------------------------------------------*@

@code{
    //المتغيرات
    #region Global Variables

    string User_Name;
    string QueryString;
    int counter = 0;
    long? RowId_Order;
    string Row_Approved_By,CustomerName,ContractType,ContractCode,OrderType,Inventory,Start_Sarf,Start_Istlam, MostakhlasName;
    string Url_Parm_Order;
    string ToastContent;
    string[] LightGreen = { "color: #0b7924f0;font-weight:Bold" };
    string[] Pink = { "color: #dc3545ee;font-weight:Bold" };
    SfGrid<VM_SupplyInstall_Items_Transfere> grdOrders;
    SfGrid<VM_SupplyInstall_Items_Transfere_Details> grdOrders_Details;
    SfButton refbtn_Success_Approval;

    SfToast Toast_Success, Toast_Custom_Failed;
    VM_SupplyInstall_Items_Transfere vM_SupplyInstall_Items_Transfere = new VM_SupplyInstall_Items_Transfere();
    VM_SupplyInstall_Items_Transfere_Details vM_SupplyInstall_Items_Transfere_Details = new VM_SupplyInstall_Items_Transfere_Details();
    VM_SupplyInstall_Items_Transfere_Details vM_SupplyInstall_Items_Transfere_Details2 = new VM_SupplyInstall_Items_Transfere_Details();
    //Permissions Permissions_Obj = new Permissions();
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    VM_Inv_GL vM_Inv_GL = new VM_Inv_GL();


    List<VM_SupplyInstall_Items_Transfere> DataSource_Orders = new List<VM_SupplyInstall_Items_Transfere>();
    List<VM_SupplyInstall_Items_Transfere_Details> DataSource_Orders_Datails = new List<VM_SupplyInstall_Items_Transfere_Details>();
    private List<VM_Def_Items>DataSource_Items = new List<VM_Def_Items>();
    List<string> DataSource_Customers, DataSource_Inventory, DataSource_Contract_HardCopyCode, DataSource_OrderType, DataSource_Employees = new List<string>();
    List<string> DataSource_Contract_Type = new List<string>();

    #endregion

    //تهيئة الصفحة
    protected override async Task OnInitializedAsync()
    {
        DataSource_Orders = await httpClient.GetJsonAsync<List<VM_SupplyInstall_Items_Transfere>>(Configuration.GetValue<string>("Api") + "/api/SupplyInstall_Items_Transfere");
        DataSource_Orders.RemoveAll(a => a.Deleted_By != null);

        DataSource_Customers = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=select Title From Def_Accounts_api where Type='عميل'&Required_Field=Title");
        DataSource_Inventory = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=select Title From Def_Accounts_api where Type='مخزن'&Required_Field=Title");
        DataSource_Contract_HardCopyCode = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=" + "select HardCopyCode From Inv_Contracts &Required_Field=HardCopyCode");
        DataSource_OrderType = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=select * From SupplyInstall_Items_Transfere_Types &Required_Field=Title");
        DataSource_Employees = await httpClient.GetJsonAsync<List<string>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=select * From Def_Employees_api &Required_Field=Name_Ar");
        DataSource_Items = await httpClient.GetJsonAsync<List<VM_Def_Items>>(Configuration.GetValue<string>("Api") + "/api/Items_api");

        DataSource_Contract_Type.Add("تركيبات");
        DataSource_Contract_Type.Add("صيانة");
        DataSource_Contract_Type.Add("ضمان");

        Start_Sarf = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=Select Title from SupplyInstall_Items_Transfere_Types where Title like '%صرف%'  &Required_Field=Title");
        Start_Istlam = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadColumn?QueryString=Select Title from SupplyInstall_Items_Transfere_Types where Title like '%إستلام%'  &Required_Field=Title");

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Permissions_Obj = await sessionStorage.GetItemAsync<Permissions>("Permissions");
        //User_Name = Permissions_Obj.UserName;
        /////////////////////////////////////////
        //--Get User Data
        var user = (await AuthStat).User;
        User_Name = user.Identity.Name;
        /////////////////////////////////////////
        // print
        //Url_Parm_Order = Configuration.GetValue<string>("Reports") + "/Print/Reports_Sales_Offers_Technical.aspx" + "?The_Footer=" + User_Name + "&Signature=" + User_Name + "&HardCopyCode=" + RowId_Order;
    }

    // تحديد صف الاذن
    public async void RowSelect_Order(RowSelectEventArgs<VM_SupplyInstall_Items_Transfere> Args)
    {
        RowId_Order = Args.Data.HardCopyCode;
        Row_Approved_By = Args.Data.Approved_By;
        CustomerName = Args.Data.Customer;
        ContractType = Args.Data.Contract_Type;
        ContractCode = Args.Data.Contract_HardCopyCode;
        OrderType = Args.Data.Job_Type;
        Inventory = Args.Data.Inventory;

        this.DataSource_Orders_Datails = await httpClient.GetJsonAsync<List<VM_SupplyInstall_Items_Transfere_Details>>(Configuration.GetValue<string>("Api") + "/api/Services/ReadTable?QueryString=select * From SupplyInstall_Items_Transfere_Details Where HardCopyCode = '" + RowId_Order + "'");
        StateHasChanged();
        //await jsRuntime.InvokeAsync<string>("console.log", "RowId_Order>> " + RowId_Order);
    }

    //ألوان الشبكة
    public void CellColor_Orders(QueryCellInfoEventArgs<VM_SupplyInstall_Items_Transfere> args)
    {
        if (!string.IsNullOrEmpty(args.Data.Approved_By))
        {
            args.Cell.AddStyle(LightGreen);
        }
    }

    // عمليات علي شبكة  الاذونات
    public async void ActionBegin_Orders(ActionEventArgs<VM_SupplyInstall_Items_Transfere> args)
    {
        try
        {
            if (args.RequestType.ToString() == "Delete")
            {
                if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
                {
                    this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
                    await this.Toast_Custom_Failed.Show();
                    return;
                }
                await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Services/UpdateField?QueryString=" + "Update SupplyInstall_Items_Transfere set Deleted_By = '" + User_Name + "' , Deleted_At = getdate() where ID = '" + args.Data.ID + "'", vM_SupplyInstall_Items_Transfere);
                await this.Toast_Success.Show();
            }
            else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {

                if (args.Action == "add")
                {
                    // (Add) Post Api
                }
                else
                {
                    // (Edit) Put Api    Inventory_Employee

                    if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
                    {
                        this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
                        await this.Toast_Custom_Failed.Show();
                        return;
                    }


                    await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Services/UpdateField?QueryString=" + "Update SupplyInstall_Items_Transfere set Modified_By = '" + User_Name + "' , Modified_At = getdate()" +
            //",The_Date = '" + args.Data.The_Date + "' " +
            ",Customer = '" + args.Data.Customer + "' " +
            ",Contract_Type = '" + args.Data.Contract_Type + "' " +
            ",Contract_HardCopyCode = '" + args.Data.Contract_HardCopyCode + "' " +
            ",Job_Type = '" + args.Data.Job_Type + "' " +
            ",Inventory = '" + args.Data.Inventory + "' " +
            ",Inventory_Employee = '" + args.Data.Inventory_Employee + "' " +
            ",Boss_Employee = '" + args.Data.Boss_Employee + "' " +
            ",Stage = '" + args.Data.Stage + "' " +

            " where ID = '" + args.Data.ID + "'", vM_SupplyInstall_Items_Transfere);

                    await this.Toast_Success.Show();
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
    }

    // عمليات علي شبكة تفاصيل العروض
    public async void ActionBegin_Orders_Details(ActionEventArgs<VM_SupplyInstall_Items_Transfere_Details> args)
    {
        try
        {
            if (args.RequestType.ToString() == "Delete")
            {
                if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
                {
                    this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
                    await this.Toast_Custom_Failed.Show();
                    return;
                }
                if (grdOrders_Details.TotalItemCount == 1)
                {
                    this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Delete_All_Grid_Items"];
                    await this.Toast_Custom_Failed.Show();
                    return;
                }
                await httpClient.DeleteAsync(Configuration.GetValue<string>("Api") + "/api/SupplyInstall_Items_Transfere_Details/" + args.Data.ID);
                await this.Toast_Success.Show();
                return;
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {

                if (args.Action == "add")

                // (Add) Post 

                {
                    if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
                    {
                        this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
                        await this.Toast_Custom_Failed.Show();
                        return;
                    }

                    vM_SupplyInstall_Items_Transfere_Details.HardCopyCode = RowId_Order;
                    vM_SupplyInstall_Items_Transfere_Details.Item = args.Data.Item;
                    vM_SupplyInstall_Items_Transfere_Details.Quantity = args.Data.Quantity;
                    vM_SupplyInstall_Items_Transfere_Details.Statment = args.Data.Statment;

                    await httpClient.PostJsonAsync(Configuration.GetValue<string>("Api") + "/api/SupplyInstall_Items_Transfere_Details", vM_SupplyInstall_Items_Transfere_Details);
                    await this.Toast_Success.Show();
                }

                else

                // (Edit) Put 

                {
                    if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
                    {
                        this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"] + languageContainer.Keys["Because_It_Approved"];
                        await this.Toast_Custom_Failed.Show();
                        return;
                    }

                    vM_SupplyInstall_Items_Transfere_Details2.ID = args.Data.ID;
                    vM_SupplyInstall_Items_Transfere_Details2.HardCopyCode = args.Data.HardCopyCode;
                    vM_SupplyInstall_Items_Transfere_Details2.Item = args.Data.Item;
                    vM_SupplyInstall_Items_Transfere_Details2.Quantity = args.Data.Quantity;
                    vM_SupplyInstall_Items_Transfere_Details2.Statment = args.Data.Statment;

                    await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/SupplyInstall_Items_Transfere_Details?id=" + args.Data.ID.ToString(), vM_SupplyInstall_Items_Transfere_Details2);
                    await this.Toast_Success.Show();
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
        }
    }

    // زر اعتماد الاذن
    protected async void btn_Success_Approval()
    {
        // اعتماد في جدول توريد الاصناف
        if (RowId_Order == 0)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Toast_Failed_SelectRow"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        else if (string.IsNullOrWhiteSpace(Row_Approved_By) != true)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Cant_Do_this_Operation"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        else
        {
            QueryString = "Update SupplyInstall_Items_Transfere set Approved_By = '" + User_Name + "' , Approved_At = getdate() where HardCopyCode = '" + RowId_Order + "'";
            await httpClient.PutJsonAsync(Configuration.GetValue<string>("Api") + "/api/Services/UpdateField?QueryString=" + QueryString, vM_SupplyInstall_Items_Transfere);
            //await this.Toast_Success.Show();
            MostakhlasName = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ReadField?QueryString=select Item from Inv_GL where Type='تعاقد' And HardCopyCode = '"+ContractCode+"' &Required_Field=Item");
            MostakhlasName = MostakhlasName.Replace("\"", "");
        }
        refbtn_Success_Approval.Disabled = true;

        await OnInitializedAsync();
        StateHasChanged();
        // ------------------------------------------------------
        //-------------------  عمل قيد چي إل للاصناف -----------------------

        foreach (VM_SupplyInstall_Items_Transfere_Details item in grdOrders_Details.DataSource.ToList())
        {


            vM_Inv_GL.Type = OrderType;
            vM_Inv_GL.The_User = User_Name;
            vM_Inv_GL.Contract_Type = ContractType;
            vM_Inv_GL.Contract_Code = ContractCode;
            vM_Inv_GL.Apporoved_By = User_Name;
            vM_Inv_GL.Approved_At = DateTime.Now;
            vM_Inv_GL.HardCopyCode =Convert.ToInt32(ContractCode);
            vM_Inv_GL.Document_ID = RowId_Order.ToString();
            vM_Inv_GL.ProccessID = await httpClient.GetStringAsync(Configuration.GetValue<string>("Api") + "/api/Services/ProccessID");
            vM_Inv_GL.The_Date = DateTime.Now;
            vM_Inv_GL.Item = item.Item;
            vM_Inv_GL.Quantity =item.Quantity;
            vM_Inv_GL.Unit_Price = 0;
            vM_Inv_GL.Value = 0;
            vM_Inv_GL.Auto_Statement = "عملية '" + ContractType + "' عقد رقم '" + ContractCode + "' بناءاً علي الإذن رقم '" + RowId_Order + "'   خاصة العميل '" + CustomerName + "'";
            vM_Inv_GL.Notes = item.Statment;
            vM_Inv_GL.Custom_Statement = item.Statment;
            vM_Inv_GL.Currency = "ريال سعودي";


            //-------------------------------  لو نوع الاذن صرف  ---------------------------------

            if (Start_Sarf.IndexOf(OrderType) != -1)
            {
                if (ContractType == "تركيبات")
                {
                    vM_Inv_GL.DebitAccount = MostakhlasName;
                    vM_Inv_GL.CreditAccount = Inventory;
                }
                if (ContractType == "صيانة")
                {
                    vM_Inv_GL.DebitAccount = CustomerName;
                    vM_Inv_GL.CreditAccount = Inventory;
                }
                if (ContractType == "ضمان")
                {
                    vM_Inv_GL.DebitAccount = CustomerName;
                    vM_Inv_GL.CreditAccount = Inventory;
                }

            }

            //-------------------------------  لو نوع الاذن إستلام  ---------------------------------

            if (Start_Istlam.IndexOf(OrderType) != -1)
            {
                if (ContractType == "تركيبات")
                {
                    vM_Inv_GL.DebitAccount = Inventory;
                    vM_Inv_GL.CreditAccount = MostakhlasName;
                }
                if (ContractType == "صيانة")
                {
                    vM_Inv_GL.DebitAccount = Inventory;
                    vM_Inv_GL.CreditAccount = CustomerName;
                }
                if (ContractType == "ضمان")
                {
                    vM_Inv_GL.DebitAccount = Inventory;
                    vM_Inv_GL.CreditAccount = CustomerName;
                }

            }

            // api Post (Insert)
            await httpClient.PostJsonAsync(Configuration.GetValue<string>("Api") + "/api/Inv_GL_api", vM_Inv_GL);
        }
        //--------------------------------------------------------------------------------
        await this.Toast_Success.Show();
    }


    // زر طباعة الاذن
    public async void Print_Order()
    {
        if (RowId_Order == 0)
        {
            this.Toast_Custom_Failed.Content = languageContainer.Keys["Toast_Failed_SelectRow"];
            await this.Toast_Custom_Failed.Show();
            return;
        }
        else
        {
            await jsRuntime.InvokeAsync<object>("open", new TimeSpan(1,1,1), Url_Parm_Order, "_blank");
        }
    }



}
